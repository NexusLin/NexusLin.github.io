import{_ as e,n as a,q as r,t}from"./chunks/theme-components.DDZ15eKn.js";import"./chunks/search-index.B-gvvmFQ.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/ms/vue-认识.md","filePath":"src/ms/vue-认识.md","lastUpdated":1750413191000}');const u=e({name:"src/ms/vue-认识.md"},[["render",function(e,o,u,h,i,n){return r(),a("div",null,o[0]||(o[0]=[t('<h2 id="vue的认识理解" tabindex="-1">vue的认识理解 <a class="header-anchor" href="#vue的认识理解" aria-label="Permalink to &quot;vue的认识理解&quot;">​</a></h2><h3 id="历史" tabindex="-1">历史 <a class="header-anchor" href="#历史" aria-label="Permalink to &quot;历史&quot;">​</a></h3><p>Vue.js是尤雨溪在2014年发布的一个渐进式JavaScript前端框架，用于构建用户界面。</p><p>15年发布了1.0版本,16年2月发布了2.0版本,20年发布了3.0版本</p><h3 id="vue发展简史" tabindex="-1">Vue发展简史 <a class="header-anchor" href="#vue发展简史" aria-label="Permalink to &quot;Vue发展简史&quot;">​</a></h3><p>2013 年第一次发布带有VueJS 名字的版本 2014年第一次公开宣传 2015年10 月:1.0版本发布 2016年10 月:2.0版本发布 2018年9月:3.0开始开发 2020 年9月:3.0发布 2022年1月:3.x正式成为默认版本 2023 年12月31日:2.x停止维护</p><h3 id="理念" tabindex="-1">理念 <a class="header-anchor" href="#理念" aria-label="Permalink to &quot;理念&quot;">​</a></h3><p>vue的理念是“逐步增强”，也就是我们可以在SPA单页面使用，也可以把整个vue生态应用于我们的项目中，比如vue Router、vuex等</p><h3 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h3><h4 id="vue是数据驱动视图的" tabindex="-1">vue是数据驱动视图的 <a class="header-anchor" href="#vue是数据驱动视图的" aria-label="Permalink to &quot;vue是数据驱动视图的&quot;">​</a></h4><p>vue采用数据驱动视图（MVVM 模型 视图 视图模型层），通过数据来驱动视图的更新，数据变化视图自动更新，不需要手动操作DOM，减少了DOM操作，提高了性能。</p><h4 id="vue是响应式系统的" tabindex="-1">vue是响应式系统的 <a class="header-anchor" href="#vue是响应式系统的" aria-label="Permalink to &quot;vue是响应式系统的&quot;">​</a></h4><p>Vue.js 的最大特点就是响应式系统，vue的响应式系统基于数据劫持以及发布订阅模式，vue2通过Object.defineProperty()实现的，vue3是通过Proxy()实现的，通过劫持对象的 getter 和 setter实现数据的自动更新。</p><p>好处就是我们不需要手动频繁操作DOM，数据变化，视图自动更新。</p><h3 id="组件化开发" tabindex="-1">组件化开发 <a class="header-anchor" href="#组件化开发" aria-label="Permalink to &quot;组件化开发&quot;">​</a></h3><p>Vue 鼓励采用组件化开发，组件的样式、方法、逻辑抽离封装，通过 props 和 events 实现父子组件间的数据传递，同时通过插槽（Slots）实现布局和内容复用，提升了我们代码的维护和复用性。</p><h3 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h3><p>Vue.js使用了虚拟DOM来提高性能，利用节点树 + diff 算法在视图有变动的时候去改变需要变动的部分，采用双向指针，边对比，边更新DOM</p><h3 id="模板语法和指令" tabindex="-1">模板语法和指令 <a class="header-anchor" href="#模板语法和指令" aria-label="Permalink to &quot;模板语法和指令&quot;">​</a></h3><p>vue.js给我们提供了简洁的语法和指令，比如v-if(条件渲染)、v-for(循环渲染)、v-bind(数据绑定)、v-model(双向绑定)、v-on(DOM 事件) 等</p>',20)]))}]]);export{o as __pageData,u as default};
