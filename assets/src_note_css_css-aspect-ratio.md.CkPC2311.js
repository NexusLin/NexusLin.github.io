import{_ as s,c as n,o as p,ag as t}from"./chunks/framework.CqxIsSM8.js";const i="/note/css-aspect-ratio1.png",e="/note/css-aspect-ratio2.png",l="/note/css-aspect-ratio3.png",m=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/note/css/css-aspect-ratio.md","filePath":"src/note/css/css-aspect-ratio.md","lastUpdated":1748425887000}'),o={name:"src/note/css/css-aspect-ratio.md"};function c(d,a,r,h,g,u){return p(),n("div",null,a[0]||(a[0]=[t('<h2 id="css新特性aspect-ratio-2021年9月出的特性" tabindex="-1">CSS新特性aspect-ratio（2021年9月出的特性） <a class="header-anchor" href="#css新特性aspect-ratio-2021年9月出的特性" aria-label="Permalink to &quot;CSS新特性aspect-ratio（2021年9月出的特性）&quot;">​</a></h2><h3 id="_1、-认识" tabindex="-1">1、 认识 <a class="header-anchor" href="#_1、-认识" aria-label="Permalink to &quot;1、 认识&quot;">​</a></h3><p>纵横比；屏幕高宽比 aspect-ratio: 16/9; // 设置宽高比</p><p>最新的浏览器chrom88 稳定版发布的信息看到，已经完全支持aspect-ratio了</p><p>应用场景 aspect ratio翻译为中文就是宽高比（也称：纵横比）即x:y。我们日常生活中常见的宽高比由4:3和16:9。如图： x:y = 4:3</p><p><img src="'+i+`" alt="image.png"></p><p>为什么会有这个属性呢？</p><p>一般情况下只有某些替换的元素具有长宽比，尤其是图像。</p><p>对于它们，如果仅指定宽度和高度之一，则可以使用固有长宽比从中计算出另一个。</p><p>然而对于大多数元素是不具有此性质的，此属性允许为任何其他元素显式指定长宽比，以获得相似的行为。随着科技的发展，对于我们web人员的来说，保持宽高比越来越重要，尤其当元素尺寸需要我们同时适配不同设备时。</p><h3 id="_2、-旧的解决方案-padding-top" tabindex="-1">2、 旧的解决方案：padding-top <a class="header-anchor" href="#_2、-旧的解决方案-padding-top" aria-label="Permalink to &quot;2、 旧的解决方案：padding-top&quot;">​</a></h3><p>在chrome88之前不支持aspect-ratio的时候，主要的方案是使用padding-top或者padding-bottom来解决。</p><p><code>padding-top</code>解决方案：</p><p>aspect-ratio 出现之前，我们通常使用 padding-top 属性来保持比例，因为百分比的 padding 值是基于父元素的宽度。 例如，为了设置 16:9 视频的宽高比例，我们必须编写以下代码：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.video {</span></span>
<span class="line"><span>  width: 100%;</span></span>
<span class="line"><span>  padding-top: 56.25%;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>讲述padding-top之前，请思考使用一个div实现width为200px, height为0的的正方形？</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>width: 200px; height: 0; ???</span></span></code></pre></div><p>很多面试来的同学都会直接说padding-top: 100%或者padding-bottom: 100%; 那么就错了，表现如下：</p><p><img src="`+e+`" alt="image.png"> 原因： padding-top的百分比是基于父元素的width来计算的</p><p>此方案也被称为“ Padding-Top Hack”。该解决方案需要一个父容器和一个绝对放置的子容器。然后，可以将宽高比计算为百分比以设置为<code>padding-top</code>。例如：</p><ul><li>1：1长宽比= 1/1 = 1 = <code>padding-top: 100%</code></li><li>4：3长宽比= 3/4 = 0.75 = <code>padding-top: 75%</code></li><li>3：2长宽比= 2/3 = 0.66666 = <code>padding-top: 66.67%</code></li><li>16：9长宽比= 9/16 = 0.5625 = <code>padding-top: 56.25%</code></li></ul><p>现在，我们已经确定了宽高比值，可以将其应用于父容器。考虑以下示例：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;container&quot;&gt;  &lt;img class=&quot;media&quot; src=&quot;1.jpg&quot;&gt; &lt;/div&gt;</span></span>
<span class="line"><span>.container {  </span></span>
<span class="line"><span>  position: relative;  </span></span>
<span class="line"><span>  width: 100%;  </span></span>
<span class="line"><span>  padding-top: 100%; /* 1:1 Aspect Ratio */ </span></span>
<span class="line"><span>}  </span></span>
<span class="line"><span>.media {  position: absolute;  top: 0; }</span></span></code></pre></div><h3 id="_3、使用aspect-ratio" tabindex="-1">3、使用aspect-ratio <a class="header-anchor" href="#_3、使用aspect-ratio" aria-label="Permalink to &quot;3、使用aspect-ratio&quot;">​</a></h3><p>比如我们正常在我们的项目之中经常会使用背景图，如何设置一个满屏幕1920x1080的背景图,这个时候我们就可以这么做。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>aspect-ratio: 1920/1080;</span></span></code></pre></div><p>不幸的是使用padding-top来计算宽高比显得不够直观。并且需要一些额外的开销和定位。有了新的<code>aspect-ratio</code> 属性，用于保持纵横比就更加清晰了</p><p>我们将padding-top：100%改为aspect-ratio: 1/1来设置width/height的比率</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.container {  </span></span>
<span class="line"><span>   width: 100%;  </span></span>
<span class="line"><span>   aspect-ratio: 1 / 1; </span></span>
<span class="line"><span>   border-radius: 4px 4px 0 0;  </span></span>
<span class="line"><span>   overflow: hidden; </span></span>
<span class="line"><span>}   </span></span>
<span class="line"><span>.media {  /* position: absolute;     top: 0; */   }</span></span></code></pre></div><p>此新属性还增加了将长宽比设置为auto的功能，其中“具有固有长宽比的[可替换元素]将使用该长宽比；否则，该框没有首选的长宽比”。如果同时指定了auto和，则优选的宽高比是指定的宽度与高度之比，除非它是具有固有长宽比的可替换元素，在这种情况下，将使用长宽比。</p><h4 id="日常使用" tabindex="-1">日常使用 <a class="header-anchor" href="#日常使用" aria-label="Permalink to &quot;日常使用&quot;">​</a></h4><p>对于图片和视频，可以将 aspect-ratio 属性和 object-fit 属性结合使用，aspect-ratio 定义元素的宽高比例，object-fit 则指定内容如何填充元素。 正常我们写一个图片百分百的样式</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>position: fixed;</span></span>
<span class="line"><span>    left: 0;</span></span>
<span class="line"><span>    top: 0;</span></span>
<span class="line"><span>    width: 100vw; /* 使用视口宽度 */</span></span>
<span class="line"><span>    height: 100vh; /* 使用视口高度 */</span></span>
<span class="line"><span>    background-image:url(&#39;~@/assets/image/backimgpersonality.png&#39;);</span></span>
<span class="line"><span>    background-size: cover; /* 保持图片比例并覆盖整个区域 */</span></span>
<span class="line"><span>    background-position: center; /* 图片居中显示 */</span></span>
<span class="line"><span>    z-index: -1; /* 背景层级 */</span></span></code></pre></div><p>但是这样写的话，图片的宽高比会改变，导致图片变形，所以我们可以使用aspect-ratio属性来设置宽高比，这样图片就不会变形了</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>position: fixed;</span></span>
<span class="line"><span>    left: 0;</span></span>
<span class="line"><span>    top: 0;</span></span>
<span class="line"><span>    width: 100%; /* 使用视口宽度 */</span></span>
<span class="line"><span>    height: 100%; /* 使用视口高度 */</span></span>
<span class="line"><span>    aspect-ratio: 16/9; /* 设置宽高比 */</span></span>
<span class="line"><span>    background-image:url(&#39;~@/assets/image/backimgpersonality.png&#39;);/* 图片地址 */</span></span>
<span class="line"><span>    background-size: cover; /* 保持图片比例并覆盖整个区域 */</span></span>
<span class="line"><span>    background-position: center; /* 图片居中显示 */</span></span>
<span class="line"><span>    z-index: -1; /* 背景层级 */</span></span></code></pre></div><p>这个时候无论我们如何缩放，图片的宽高比都不会改变，图片不会变形，同样背景也保持良好的兼容性扩展。</p><h4 id="例1-保持网格一致性" tabindex="-1">例1： 保持网格一致性 <a class="header-anchor" href="#例1-保持网格一致性" aria-label="Permalink to &quot;例1： 保持网格一致性&quot;">​</a></h4><p>这对于CSS布局机制（例如CSS Grid和Flexbox）也非常有效。考虑一个列表，其中你需要保持1：1纵横比的子级，例如：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ul class=&quot;grid&quot;&gt;  &lt;li class=&quot;subgrid&quot;&gt;  &lt;img src=&quot;./ins.jpg&quot;/&gt;  &lt;/li&gt;  &lt;li class=&quot;subgrid&quot;&gt;  &lt;img src=&quot;./ins.jpg&quot;/&gt;  &lt;/li&gt;  &lt;/ul&gt;</span></span>
<span class="line"><span>.grid {  </span></span>
<span class="line"><span>   display: grid;  </span></span>
<span class="line"><span>   grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));  </span></span>
<span class="line"><span>}   </span></span>
<span class="line"><span>.subgrid img {  </span></span>
<span class="line"><span>   aspect-ratio: 1 / 1;  </span></span>
<span class="line"><span>   width: 100%;  </span></span>
<span class="line"><span>   object-fit: contain;   </span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="例2-防止布局偏移" tabindex="-1">例2：防止布局偏移 <a class="header-anchor" href="#例2-防止布局偏移" aria-label="Permalink to &quot;例2：防止布局偏移&quot;">​</a></h4><p>使用aspect-ratio属性，它可以创建一个占位符空间，以此来防止布局偏移，从而获得更好的性能。</p><p>例3：对可替换元素设置指定的宽和高，通过将现有尺寸转换为优选的纵横比，为它赋予首选的长宽比，还会为它提供自然的高度或宽度。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;img src=&quot;image.jpg&quot; alt=&quot;...&quot; width=&quot;8&quot; height=&quot;6&quot;&gt;</span></span>
<span class="line"><span>img {  width: 100%; }</span></span></code></pre></div><p>同理：iframe上设置width和height来获得和图像类似的宽高比，如：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;iframe  src=&quot;https://www.youtube.com/embed/0Gr1XSyxZy0&quot;  width=560  height=315&gt;</span></span>
<span class="line"><span>@supports (aspect-ratio: attr(width number) / 1) {  </span></span>
<span class="line"><span>  iframe {  </span></span>
<span class="line"><span>      aspect-ratio: attr(width number) / attr(height number);  </span></span>
<span class="line"><span>      width: 100%;  height: auto;   </span></span>
<span class="line"><span>  } </span></span>
<span class="line"><span>}</span></span></code></pre></div><p>总而言之。借助新的<code>aspect-ratio</code>CSS属性，可以在多种现代浏览器使媒体或布局容器中保持适当的宽高比变得更加简单。</p><h3 id="_4、兼容性" tabindex="-1">4、兼容性： <a class="header-anchor" href="#_4、兼容性" aria-label="Permalink to &quot;4、兼容性：&quot;">​</a></h3><p>浏览器支持: 91.23%，从这个特性我们也能看出，几乎支撑性是完美的！</p><p><img src="`+l+'" alt="image.png"></p>',49)]))}const v=s(o,[["render",c]]);export{m as __pageData,v as default};
