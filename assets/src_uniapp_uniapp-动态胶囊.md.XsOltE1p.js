import{_ as a,c as s,ag as t,o as n}from"./chunks/framework.wRLzwZz-.js";const o=JSON.parse('{"title":"uniapp6-pinia持久化依赖和胶囊按钮的动态顶部距离","description":"","frontmatter":{},"headers":[],"relativePath":"src/uniapp/uniapp-动态胶囊.md","filePath":"src/uniapp/uniapp-动态胶囊.md"}'),e={name:"src/uniapp/uniapp-动态胶囊.md"};function p(l,i,h,k,d,r){return n(),s("div",null,i[0]||(i[0]=[t(`<h1 id="uniapp6-pinia持久化依赖和胶囊按钮的动态顶部距离" tabindex="-1">uniapp6-pinia持久化依赖和胶囊按钮的动态顶部距离 <a class="header-anchor" href="#uniapp6-pinia持久化依赖和胶囊按钮的动态顶部距离" aria-label="Permalink to &quot;uniapp6-pinia持久化依赖和胶囊按钮的动态顶部距离&quot;">​</a></h1><h2 id="_1、pinia持久化依赖" tabindex="-1">1、pinia持久化依赖 <a class="header-anchor" href="#_1、pinia持久化依赖" aria-label="Permalink to &quot;1、pinia持久化依赖&quot;">​</a></h2><h3 id="_1-刷新问题" tabindex="-1">（1）刷新问题 <a class="header-anchor" href="#_1-刷新问题" aria-label="Permalink to &quot;（1）刷新问题&quot;">​</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580785808-bf5da172-d661-4b8c-9f24-83a4dfa5fec9.webp" alt=""></p><p>这里我们每次进行刷新的时候都需要重新登陆，主要原因是因为我们没有进行持久化存储，我们先对于pinia进行持久化存储的设置</p><h3 id="_2-安装pinia持久化依赖" tabindex="-1">（2）安装pinia持久化依赖 <a class="header-anchor" href="#_2-安装pinia持久化依赖" aria-label="Permalink to &quot;（2）安装pinia持久化依赖&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add pinia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">persistedstate</span></span></code></pre></div><p>store文件夹下面新建一个index.js文件，在这之中添加pinia的持久化存储</p><p>引入我们持久化存储的依赖，然后使用这个持久化存储就可以</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createPinia } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pinia&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> persist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pinia-plugin-persistedstate&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建pinia实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pinia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPinia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用持久化存储插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pinia.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(persist)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//默认导出 给main.ts使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinia</span></span></code></pre></div><h3 id="_3-在main-js文件之中进行配置" tabindex="-1">（3）在main.js文件之中进行配置 <a class="header-anchor" href="#_3-在main-js文件之中进行配置" aria-label="Permalink to &quot;（3）在main.js文件之中进行配置&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//导入pinia</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/store/index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建Pinia实例  // 将pinia实例挂载到vue实例上</span></span></code></pre></div><p>再次刷新点击，这个时候我们的状态已经存储进去了，并且重新点击也不会进行刷新，状态进行了保存！</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580785891-abbbb012-2080-4a57-bb15-783e8d2255e3.webp" alt=""></p><h2 id="_2、解决uni-app开发的view页面中的文本乱码问题" tabindex="-1">2、解决uni-app开发的view页面中的文本乱码问题 <a class="header-anchor" href="#_2、解决uni-app开发的view页面中的文本乱码问题" aria-label="Permalink to &quot;2、解决uni-app开发的view页面中的文本乱码问题&quot;">​</a></h2><p>接下来我们完善写一个我的页面，但是在写之前我们却遇到了一个问题，就是我们的文字显示乱码了。这里我们简单看一下是由于什么原因造成的。</p><p>看一下我们原本的页面 <img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580785902-c88c3e55-6042-417b-90c3-cb1fd6e2bbd2.webp" alt=""></p><p>再看一下我们运行之后显示的界面 <img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786144-d718cbde-ef87-4887-b21b-bec9b3166977.webp" alt=""></p><h3 id="_1-问题原因" tabindex="-1">（1）问题原因： <a class="header-anchor" href="#_1-问题原因" aria-label="Permalink to &quot;（1）问题原因：&quot;">​</a></h3><p>页面的编码格式不是 utf-8 造成的</p><h3 id="_2-解决方法" tabindex="-1">（2）解决方法 <a class="header-anchor" href="#_2-解决方法" aria-label="Permalink to &quot;（2）解决方法&quot;">​</a></h3><p>1 打开你的vue问题页面；<br> 2 点击左侧菜单栏文件，选择“以指定编码重新打开”，选择“UTF-8”，就可以了。</p><p><code>温馨提示：最好提前复制一下中文啥的，因为打开以后中文变了也</code></p><p>具体操作流程可以看这张图</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580785823-cec6effd-68b2-4a9b-92b5-3fbbe86d0b58.webp" alt=""></p><p>再次运行（记得清理一下缓存），打开查看一下我们的页面，这里我们发现，整个页面已经可正常显示了 ！ <img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786188-9e483a79-fb2b-42c3-b6b6-3fca0a8f7be0.webp" alt=""></p><h2 id="_3、优化页面视距问题-getmenubuttonboundingclientrect" tabindex="-1">3、优化页面视距问题（getMenuButtonBoundingClientRect()） <a class="header-anchor" href="#_3、优化页面视距问题-getmenubuttonboundingclientrect" aria-label="Permalink to &quot;3、优化页面视距问题（getMenuButtonBoundingClientRect()）&quot;">​</a></h2><h3 id="_1-优化的问题" tabindex="-1">（1）优化的问题 <a class="header-anchor" href="#_1-优化的问题" aria-label="Permalink to &quot;（1）优化的问题&quot;">​</a></h3><p>上面的截图里面有个问题，细心的应该也已经发现了，就是我们页面的视距就好像那个我的界面四个字跑到了最外层的那个上面一样，在我们有些页面之中无法及时的显示在页面可见范围的正中间，那么这种情况下我们应该如何处理呢？</p><p>思路：</p><p>接下来我们就利用 <code>menuButtonInfo</code> 中的位置信息，计算出一个动态的 <code>marginTop</code> 值，以确保视图元素（<code>&lt;view&gt;</code>）在页面中的正确位置，使得 <code>&lt;view&gt;</code> 元素的顶部边距（<code>marginTop</code>）可以动态地调整为按钮中心相对于顶部的位置。</p><p>优点：</p><p>这样的动态计算确保视图元素在页面布局中正确地对齐或排列，在需要响应式布局或相对定位时效果非常好。</p><h3 id="_2-getmenubuttonboundingclientrect-认识" tabindex="-1">（2）getMenuButtonBoundingClientRect()认识 <a class="header-anchor" href="#_2-getmenubuttonboundingclientrect-认识" aria-label="Permalink to &quot;（2）getMenuButtonBoundingClientRect()认识&quot;">​</a></h3><p>在小程序平台，如果原生导航栏被隐藏，仍然在右上角会有一个悬浮按钮，微信下也被称为胶囊按钮。本API用于获取小程序下该菜单按钮的布局位置信息，方便开发者布局顶部内容时避开该按钮。</p><p>坐标信息以屏幕左上角为原点。</p><p>这里我们看一下相关平台的支持性和参数 （也可以直接去uniapp官网进行搜索）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786828-d0d0eefa-f934-4ebb-a6b7-d80ff5d5528d.webp" alt=""></p><p>返回的参数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786235-bf19bf73-5ca8-48c8-a4dd-189678987194.webp" alt=""></p><p>使用起来也非常的简单</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> menuButtonInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMenuButtonBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>接下来我们就去在我们的页面之中使用一下</p><h3 id="_3-使用" tabindex="-1">（3）使用 <a class="header-anchor" href="#_3-使用" aria-label="Permalink to &quot;（3）使用&quot;">​</a></h3><p>页面中定义</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> menuButtonInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">menuButtonInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMenuButtonBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>在页面之中使用，这里其实就是占据的我们一个距离顶部的距离，所以我们填写一个距离顶部的距离即可</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :style=&quot;{marginTop:</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> menuButtonInfo.top</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> +</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> (menuButtonInfo.bottom</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> -</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> menuButtonInfo.top)/2+&#39;px&#39;}&quot;&gt;&lt;/view&gt;</span></span></code></pre></div><p>这里我们再次跑一下然后看一下我们的界面，这里我们已经可以看到我们的界面逆境可以看到布局之中我的部分已经掉落下来了。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786836-39f1df59-9de9-4a5b-8cfd-c549a9dd81ab.webp" alt=""></p><p>接下来我们对于我的页面做一些基础的装饰，后续我们的颜色主题也确定为<code>#00979c</code> 这个颜色为主</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786529-1caa7d78-f775-42f7-9ea4-c8b0c7875da9.webp" alt=""></p><p>到这里我们基础部分就搭建好了，接下来就可以开始我们的功能部分了！</p>`,53)]))}const u=a(e,[["render",p]]);export{o as __pageData,u as default};
