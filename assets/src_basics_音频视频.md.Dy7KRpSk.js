import{_ as s,c as a,ag as l,o as t}from"./chunks/framework.wRLzwZz-.js";const o=JSON.parse('{"title":"音频视频","description":"","frontmatter":{"outline":[1,3]},"headers":[],"relativePath":"src/basics/音频视频.md","filePath":"src/basics/音频视频.md"}'),n={name:"src/basics/音频视频.md"};function h(e,i,p,k,r,d){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="音频视频" tabindex="-1">音频视频 <a class="header-anchor" href="#音频视频" aria-label="Permalink to &quot;音频视频&quot;">​</a></h1><h2 id="音频" tabindex="-1">音频 <a class="header-anchor" href="#音频" aria-label="Permalink to &quot;音频&quot;">​</a></h2><h3 id="音频格式" tabindex="-1">音频格式 <a class="header-anchor" href="#音频格式" aria-label="Permalink to &quot;音频格式&quot;">​</a></h3><ul><li>MP3</li><li>WAV</li><li>AAC</li><li>OGG</li><li>WMA</li></ul><h3 id="音频编码" tabindex="-1">音频编码 <a class="header-anchor" href="#音频编码" aria-label="Permalink to &quot;音频编码&quot;">​</a></h3><ul><li>AAC</li><li>MP3</li><li>OGG</li><li>WMA</li></ul><h2 id="视频" tabindex="-1">视频 <a class="header-anchor" href="#视频" aria-label="Permalink to &quot;视频&quot;">​</a></h2><h3 id="视频格式" tabindex="-1">视频格式 <a class="header-anchor" href="#视频格式" aria-label="Permalink to &quot;视频格式&quot;">​</a></h3><ul><li>MP4</li><li>AVI</li><li>MOV</li><li>WMV</li><li>FLV</li><li>MKV</li><li>3GP</li></ul><h3 id="视频编码" tabindex="-1">视频编码 <a class="header-anchor" href="#视频编码" aria-label="Permalink to &quot;视频编码&quot;">​</a></h3><ul><li>H.264</li><li>H.265</li><li>VP8</li><li>VP9</li></ul><h3 id="视频事件" tabindex="-1">视频事件 <a class="header-anchor" href="#视频事件" aria-label="Permalink to &quot;视频事件&quot;">​</a></h3><ul><li><p>onplay: 当开始播放时触发</p></li><li><p>onpause: 当暂停播放时触发</p></li><li><p>onemptied: 当目前的播放列表为空时触发</p></li><li><p>oncanplay: 当浏览器可以开始播放视频时触发</p></li><li><p>oncanplaythrough: 当浏览器预计可以在不停下来进行缓冲的情况下持续播放视频时触发</p></li><li><p>ondurationchange: 当视频的时长发生变化时触发</p></li><li><p>onended: 当目前的播放列表已结束时触发</p></li><li><p>onerror: 当在加载视频期间发生错误时触发</p></li><li><p>onloadeddata: 当浏览器已加载音频/视频的当前帧时触发</p></li><li><p>ontimeupdate: 当目前的播放位置发生改变时触发</p></li><li><p>onloadedmetadata: 当浏览器已加载音频/视频的元数据时触发</p></li><li><p>onseeked: 当用户已移动/跳跃到音频/视频中的新位置时触发</p></li><li><p>onseeking: 当用户开始移动/跳跃到音频/视频中的新位置时触发</p></li><li><p>onvolumechange: 当音量发生变化时触发</p></li></ul><blockquote><p>页面打开，可以记录上一次的视频播放位置</p></blockquote><p>思路:</p><blockquote><blockquote></blockquote><p>1.在ontimeupdate事件触发的时候，每隔1秒钟，就记录当前时间到本地存储</p><p>2.下次打开页面， onloadeddata 事件触发，就可以从本地存储取出时间，让视频从取出的时间播放，如果没有就默认为0s</p><p>获得当前时间 video.currentTime</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.w3schools.com/html/mov_bbb.mp4&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;320&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;240&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const video = document.querySelector(&#39;video&#39;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    video.ontimeupdate =_.throttle(() =&gt;{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(video.currentTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currentTime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, video.currentTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currentTime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localStorage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>接下来我们要实现的是，当用户点击播放按钮的时候，视频从上次播放的位置开始播放</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onloadeddata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;获取时间&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      video.currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;currentTime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="视频播放器" tabindex="-1">视频播放器 <a class="header-anchor" href="#视频播放器" aria-label="Permalink to &quot;视频播放器&quot;">​</a></h3><ul><li>HTML5 video</li><li>Video.js</li></ul>`,21)]))}const g=s(n,[["render",h]]);export{o as __pageData,g as default};
