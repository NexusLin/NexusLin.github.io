import{_ as s,c as n,o as a,a4 as p}from"./chunks/framework.DvHWMJgD.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/Vue/09-项目配置eslint9.md","filePath":"src/Vue/09-项目配置eslint9.md"}'),e={name:"src/Vue/09-项目配置eslint9.md"},l=p(`<h2 id="vite-vue3-项目配置eslint9-eslint-9-9-0最新eslint配置和prettier配置-vue3系统篇十" tabindex="-1">vite+Vue3 项目配置eslint9( ESLint@9.9.0最新eslint配置和prettier配置)（Vue3系统篇十） <a class="header-anchor" href="#vite-vue3-项目配置eslint9-eslint-9-9-0最新eslint配置和prettier配置-vue3系统篇十" aria-label="Permalink to &quot;vite+Vue3 项目配置eslint9( ESLint@9.9.0最新eslint配置和prettier配置)（Vue3系统篇十）&quot;">​</a></h2><p>先看效果</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259421854-ba69a589-2cc7-4df5-af2c-7e66e172ed96.webp" alt=""></p><h3 id="_1、认识eslint和prettier" tabindex="-1">1、认识Eslint和Prettier <a class="header-anchor" href="#_1、认识eslint和prettier" aria-label="Permalink to &quot;1、认识Eslint和Prettier&quot;">​</a></h3><h4 id="_1-官网介绍" tabindex="-1">（1）官网介绍 <a class="header-anchor" href="#_1-官网介绍" aria-label="Permalink to &quot;（1）官网介绍&quot;">​</a></h4><p>在认识之前，我们依然是推荐一下最权威的几个链接</p><p>🍓 eslint官网 <a href="https://link.juejin.cn?target=https%3A%2F%2Feslint.org%2F" target="_blank" rel="noreferrer">eslint.org/</a></p><p>🍓 eslint中文网 <a href="https://link.juejin.cn?target=https%3A%2F%2Feslint.nodejs.cn%2F" target="_blank" rel="noreferrer">eslint.nodejs.cn/</a></p><p>🍓prettier官网 <a href="https://link.juejin.cn?target=https%3A%2F%2Fprettier.io%2F" target="_blank" rel="noreferrer">prettier.io/</a></p><h5 id="eslint功能和prettier功能" tabindex="-1">Eslint功能和Prettier功能 <a class="header-anchor" href="#eslint功能和prettier功能" aria-label="Permalink to &quot;Eslint功能和Prettier功能&quot;">​</a></h5><ul><li>Eslint功能： <ol><li>对js语法检测、限制和修复</li><li>对代码风格进行格式化，不能对css、less等格式化</li></ol></li><li>Prettier功能： <ol><li>Prettier不可以对任何语法检测、限制和修复</li><li>Prettier可以对多种代码风格，包括js、jsx、ts、json、css、less、scss、html、vue等进行格式化</li></ol></li></ul><p>从上面我们可以看出Eslint在对于语法检测、限制和修复方面有优势，而Prettier对代码格式化方面更加好（也是官方为我们推荐的方式），在同时使用的时候又会造成<code>Eslint的格式化</code>和<code>Prettier的格式化</code>冲突，那么我们是否可以取舍使用这两部分呢（可以）。</p><h5 id="认识eslint" tabindex="-1">认识Eslint <a class="header-anchor" href="#认识eslint" aria-label="Permalink to &quot;认识Eslint&quot;">​</a></h5><p><strong>官网对于Eslint的介绍</strong></p><p>ESLint 是一个用于识别和报告在 ECMAScript/JavaScript 代码中发现的模式的工具，其目标是使代码更加一致并避免错误。</p><p>ESLint 是完全插件化的。每条规则都是一个插件，你可以在运行时添加更多。你还可以添加社区插件、配置和解析器来扩展 ESLint 的功能。</p><p><strong>简单解释：</strong></p><p>通俗一点翻译一下就是：ESLint能够实时检测并修复代码中的错误，确保我们的代码风格一致、质量高，减少代码 bug。个人开发和团队协作都适用于ESLint（<code>需要格外注意的是，官方只是推荐我们采用ESLint的语法检测而不是代码风格---这里很多文章都是直接用ESLint，这里个人建议采用ESLint检测语法，prettier调整风格,用官方推荐的方式来进行</code>）</p><h5 id="eslint使用的版本和环境" tabindex="-1">Eslint使用的版本和环境 <a class="header-anchor" href="#eslint使用的版本和环境" aria-label="Permalink to &quot;Eslint使用的版本和环境&quot;">​</a></h5><p>官方也给我们看了Eslint使用的前提条件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259421959-57b97764-9cff-448c-a3bc-f087500af138.webp" alt=""></p><p>🍓 版本注意</p><p>这里我们需要格外注意一下Eslint的版本</p><table tabindex="0"><thead><tr><th><strong>eslint版本</strong></th><th><strong>node版本</strong></th></tr></thead><tbody><tr><td>eslint&gt;9.0.0</td><td>node 为（<code>^18.18.0</code><br>、<code>^20.9.0</code><br> 或 <code>&gt;=21.1.0</code><br>）</td></tr><tr><td>我的项目 （&quot;eslint&quot;: &quot;^9.9.0&quot;）</td><td>nodev20.12.0</td></tr></tbody></table><h3 id="_2、eslint和prettier更新" tabindex="-1">2、Eslint和Prettier更新 <a class="header-anchor" href="#_2、eslint和prettier更新" aria-label="Permalink to &quot;2、Eslint和Prettier更新&quot;">​</a></h3><h4 id="前置知识-非必须" tabindex="-1">前置知识（非必须） <a class="header-anchor" href="#前置知识-非必须" aria-label="Permalink to &quot;前置知识（非必须）&quot;">​</a></h4><p>这部分内容主要是我们看看几个最新一些官方介绍，帮助我们加强对于eslint的认识</p><p><code>time(2024-08-14)</code></p><p>首先是Eslint命名方面，<code>ESLint 配置文件可以命名为以下任意名称</code> （也就是说我们的eslint三种命名文件其实都是可以的）</p><ul><li><code>eslint.config.js</code></li><li><code>eslint.config.mjs</code></li><li><code>eslint.config.cjs</code></li></ul><p>这部分我们也可以在官方之中看到:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259422063-ff1f1e5c-2894-4ebe-b2a9-ab3017cc2813.webp" alt=""></p><h4 id="_1-eslint-9-9-0更新部分" tabindex="-1">（1）<strong>Eslint@9.9.0更新部分</strong> <a class="header-anchor" href="#_1-eslint-9-9-0更新部分" aria-label="Permalink to &quot;（1）**Eslint@9.9.0更新部分**&quot;">​</a></h4><p><code>ESLint9.0更新跟以往版本配置区别较大</code>，<code>ESLint9.0</code>又称为扁平模式(Flat Config)，比较大的改变有：</p><h6 id="文件命名以及变化" tabindex="-1">文件命名以及变化 <a class="header-anchor" href="#文件命名以及变化" aria-label="Permalink to &quot;文件命名以及变化&quot;">​</a></h6><ul><li>改用扁平模式配置文件<code>eslint.config.js</code>，旧配置文件弃用(原有的<code>.eslintrc</code>以及<code>.eslintignore</code>等配置文件弃用)</li><li>所有配置都写在一个配置文件中：<code>eslint.config.js</code>或<code>eslint.config.cjs</code>或<code>eslint.config.mjs</code></li></ul><p>区别：</p><table tabindex="0"><thead><tr><th><strong>配置文件名</strong></th><th><strong>eslint.config.js</strong></th><th><strong>eslint.config.cjs</strong></th><th><strong>eslint.config.mjs</strong></th></tr></thead><tbody><tr><td>文件后缀区别</td><td><code>.js</code><br>默认commonjs，取决于<code>package.json</code><br>中的<code>type</code><br>字段，设为<code>module</code><br>就是Module 方式，设为<code>commonjs</code><br>就是commonjs方式</td><td><code>.cjs</code><br> 需要用 commonjs 方式导出</td><td><code>.mjs</code><br> 需要用 ES Module 方式导出</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h6 id="规则变化" tabindex="-1">规则变化 <a class="header-anchor" href="#规则变化" aria-label="Permalink to &quot;规则变化&quot;">​</a></h6><ul><li>配置文件需要默认导出一个数组，每一项是一个独立的配置对象</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码export default [{},{}]</span></span></code></pre></div><ul><li>弃用了<strong>格式化</strong>相关的规则，例如缩进、空格、空行、单双引号之类规则。</li><li>ESlint9.0以后（仅支持Node.js版本是LTSv18.18.0+和v20，不支持v19以及之前的所有版本）</li><li>Flat配置文件取代eslintrc文件(需要可将<code>ESLINT_USE_FLAT_CONFIG</code>环境变量设置为<code>false</code>使用---不建议！！)</li><li>下面是删除的格式化程序与替换的 npm 包对照的表格：</li></ul><table tabindex="0"><thead><tr><th><strong>删除的格式化程序</strong></th><th><strong>替换的 npm 包</strong></th></tr></thead><tbody><tr><td>checkstyle</td><td>eslint-formatter-checkstyle</td></tr><tr><td>compact</td><td>eslint-formatter-compact</td></tr><tr><td>jslint-xml</td><td>eslint-formatter-jslint-xml</td></tr><tr><td>junit</td><td>eslint-formatter-junit</td></tr><tr><td>tap</td><td>eslint-formatter-tap</td></tr><tr><td>unix</td><td>eslint-formatter-unix</td></tr><tr><td>visualstudio</td><td>eslint-formatter-visualstudio</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="_2-prettier更新" tabindex="-1">（2）Prettier更新 <a class="header-anchor" href="#_2-prettier更新" aria-label="Permalink to &quot;（2）Prettier更新&quot;">​</a></h4><h3 id="_3、安装插件" tabindex="-1">3、安装插件 <a class="header-anchor" href="#_3、安装插件" aria-label="Permalink to &quot;3、安装插件&quot;">​</a></h3><p>👉 接下来我们就在自己的项目之中安装eslint和prettier部分的插件</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码yarn add -D eslint eslint-define-config</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add -D eslint-plugin-vue vue-eslint-parser</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add -D prettier eslint-plugin-prettier </span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add eslint-config-prettier (这个新版本已经不需要了)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span></span>
<span class="line"><span></span></span>
<span class="line"><span>👉vite部分使用</span></span>
<span class="line"><span>yarn add vite-plugin-eslint</span></span>
<span class="line"><span>yarn add eslint-config-standard</span></span>
<span class="line"><span>yarn add eslint-plugin-import</span></span>
<span class="line"><span>yarn add eslint-plugin-promise</span></span>
<span class="line"><span>yarn add eslint-plugin-node（node规范）</span></span>
<span class="line"><span>yarn add eslint-plugin-vue</span></span>
<span class="line"><span>yarn add @typescript-eslint/parser</span></span>
<span class="line"><span>yarn add @typescript-eslint/eslint-plugin</span></span></code></pre></div><p>🍓 插件功能</p><p>接下来我们分别看看我们插件以后什么作用</p><ol><li><code>**eslint**</code>: 用于静态代码分析，发现和修复代码中的潜在问题。</li><li><code>**eslint-define-config**</code>: 允许以编程方式定义 ESLint配置文件,换句话说，就是你可以自定义配置。</li><li><code>**eslint-plugin-vue**</code>: 提供 Vue 相关的 ESLint 规则，帮助我们在 Vue 文件中保持一致的代码风格。</li><li><code>**vue-eslint-parser**</code>: 解析 Vue 文件的解析器，使 ESLint 能够理解和处理 Vue 的单文件组件（SFC）1. <code>**prettier**</code>: 代码格式化工具，自动对代码进行格式化以保持一致的代码风格。</li><li><code>**eslint-plugin-prettier**</code>: 将 Prettier 的格式化规则整合到 ESLint 中，使你可以通过 ESLint 来自动应用 Prettier 的格式化。</li><li><code>~~**eslint-config-prettier**~~</code><s>: 关闭 ESLint 与 Prettier 可能冲突的规则，以确保 Prettier 处理所有格式化工作。</s>(这个新版本已经不需要了)</li><li><code>**@typescript-eslint/parser**</code>: 使 ESLint 能够解析 TypeScript 代码。</li><li><code>**@typescript-eslint/eslint-plugin**</code>: 提供 TypeScript 相关的 ESLint 规则，用于增强 TypeScript 代码的质量和一致性。</li></ol><p>安装成功以后，接下来哦我们呢就可以在自己的项目之中分别去配置对应的文件了</p><h3 id="_4、初始化eslint" tabindex="-1">4、初始化Eslint <a class="header-anchor" href="#_4、初始化eslint" aria-label="Permalink to &quot;4、初始化Eslint&quot;">​</a></h3><p>👉这里需要先初始化Eslint，我这里采用的是以下方式，然后默默等待安装就可。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码npx eslint --init</span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者</span></span>
<span class="line"><span>yarn eslint --init</span></span></code></pre></div><p>初始化过程中，ESLint 会帮助生成项目配置文件。下面是一个示例的交互过程</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码🍎 1</span></span>
<span class="line"><span>How would you like to use ESLint? …  您希望如何使用ESLint…</span></span>
<span class="line"><span>  To check syntax only  仅检查语法</span></span>
<span class="line"><span>❯ To check syntax and find problems  检查语法并发现问题</span></span>
<span class="line"><span>  To check syntax, find problems, and enforce code style 检查语法、发现问题并强制执行代码样式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>🍎 2 这里根据自己选择一下 </span></span>
<span class="line"><span>✔ How would you like to use ESLint? · problems</span></span>
<span class="line"><span>✔ What type of modules does your project use? · esm</span></span>
<span class="line"><span>✔ Which framework does your project use? · vue</span></span>
<span class="line"><span>✔ Does your project use TypeScript? · No / Yes</span></span>
<span class="line"><span>✔ Where does your code run? · browser</span></span>
<span class="line"><span>✔ What format do you want your config file to be in? · JavaScript</span></span>
<span class="line"><span>The config that you&#39;ve selected requires the following dependencies:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest</span></span>
<span class="line"><span>? Would you like to install them now with npm? › No / Yes   （这里我选择的yarn）</span></span></code></pre></div><p>完成以后我们的项目下面自动生成了一个<code>eslint.config.js</code>文件</p><p>文件内容如下：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码import globals from &quot;globals&quot;;</span></span>
<span class="line"><span>import pluginJs from &quot;@eslint/js&quot;;</span></span>
<span class="line"><span>import tseslint from &quot;typescript-eslint&quot;;</span></span>
<span class="line"><span>import pluginVue from &quot;eslint-plugin-vue&quot;;</span></span>
<span class="line"><span>import standard from &quot;eslint-config-standard&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default [</span></span>
<span class="line"><span>  {files: [&quot;**/*.{js,mjs,cjs,ts,vue}&quot;]},</span></span>
<span class="line"><span>  {languageOptions: { globals: globals.browser }},</span></span>
<span class="line"><span>  pluginJs.configs.recommended,</span></span>
<span class="line"><span>  ...tseslint.configs.recommended,</span></span>
<span class="line"><span>  ...pluginVue.configs[&quot;flat/essential&quot;],</span></span>
<span class="line"><span>  {files: [&quot;**/*.vue&quot;], languageOptions: {parserOptions: {parser: tseslint.parser}}},</span></span>
<span class="line"><span>];</span></span></code></pre></div><p>简单介绍一下这个文件里面的东西</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码import globals from &quot;globals&quot;;</span></span>
<span class="line"><span>// 导入了 \`globals\`全局变量的库模块，该模块提供了一组预定义的全局变量（如 window、document 等），这些变量通常在不同的环境（如浏览器、Node.js）中可用。在 ESLint 配置中，你可以使用这个模块来指定代码所运行的环境，从而定义全局变量。</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>import pluginJs from &quot;@eslint/js&quot;;</span></span>
<span class="line"><span>//针对 JavaScript 的 ESLint 配置和规则。保持 JavaScript 代码的一致性和质量</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import tseslint from &quot;typescript-eslint&quot;;</span></span>
<span class="line"><span>// 导入 \`typescript-eslint\` 插件（ \`typescript-eslint/parser\` 和 \`typescript-eslint/eslint-plugin\`）。提供了对 TypeScript 的支持，包括 TS 的解析器和推荐的规则集，用于在 TypeScript 文件中进行 lint 检查。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import pluginVue from &quot;eslint-plugin-vue&quot;;</span></span>
<span class="line"><span>// 导入 \`eslint-plugin-vue\` 插件，提供了 Vue.js 特有 ESLint 规则。确保 Vue 文件（\`.vue\` 文件）中的代码符合 Vue.js 的最佳实践和代码风格指南</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default [</span></span>
<span class="line"><span>  {files: [&quot;**/*.{js,mjs,cjs,ts,vue}&quot;]}, </span></span>
<span class="line"><span>  //**文件匹配**：\`files\` 属性指定了哪些文件类型（JavaScript、TypeScript、Vue 文件等）将应用这些规则</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  {languageOptions: { globals: globals.browser }},</span></span>
<span class="line"><span>  //1.  **全局变量**：\`languageOptions\` 配置了浏览器环境下的全局变量。</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>   // **插件和规则**：</span></span>
<span class="line"><span>  pluginJs.configs.recommended,</span></span>
<span class="line"><span>  -   \`pluginJs.configs.recommended\` 引入了 \`@eslint/js\` 插件的推荐规则。</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>  ...tseslint.configs.recommended,</span></span>
<span class="line"><span>  // 引入 \`typescript-eslint\` 插件的推荐规则</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  ...pluginVue.configs[&quot;flat/essential&quot;],</span></span>
<span class="line"><span>  // 引入\`eslint-plugin-vue\` 插件的基础规则</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>      files: [&quot;**/*.vue&quot;], </span></span>
<span class="line"><span>      // 针对 Vue 文件配置</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      languageOptions: {parserOptions: {parser: tseslint.parser}}</span></span>
<span class="line"><span>      //为 \`.vue\` 文件指定了 TypeScript 解析器</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>];</span></span></code></pre></div><h3 id="_5、搭建配置" tabindex="-1">5、搭建配置 <a class="header-anchor" href="#_5、搭建配置" aria-label="Permalink to &quot;5、搭建配置&quot;">​</a></h3><p><code>这里需要注意：</code></p><p>🧿 以前我们配置文件使用的是<code>.eslintrc.js</code>,这里我们采用新版本风格使用的是<code>eslint.config.js</code>，采取ES Modules模块化现代写法进行语法检测</p><p>🧿 新版本prettier使用<code>prettier.config.js</code>,采用这个进行代码风格化</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码eslint.js =&gt; \`eslint.config.js\`, // 代码语法检测</span></span>
<span class="line"><span>prettier.js =&gt; \`prettier.config.js\`  //代码风格化</span></span></code></pre></div><p>项目根目录下新建.eslintrc.config.js文件 和.prettierrc.config.js文件，这个文件是与src同级的，主要是用来配置语法检测和代码风格的。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259421989-d14102c1-bc67-4e80-a82b-3430897c5cbc.webp" alt=""></p><h4 id="👉配置eslint-eslint-config-js" tabindex="-1">👉配置eslint(eslint.config.js) <a class="header-anchor" href="#👉配置eslint-eslint-config-js" aria-label="Permalink to &quot;👉配置eslint(eslint.config.js)&quot;">​</a></h4><p><code>注意点:该eslint.config.js文件位于根目录下面，就是与src同级别的那个</code></p><p>接下来我们就开始一步一步配置我们的eslint部分，从官方推荐的版本开始逐步完成我们的配置</p><ul><li>先来看看官方给我们的基础配置</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码// eslint.config.js</span></span>
<span class="line"><span>export default [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        rules: {</span></span>
<span class="line"><span>            semi: &quot;error&quot;,</span></span>
<span class="line"><span>            &quot;prefer-const&quot;: &quot;error&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>];</span></span></code></pre></div><p>这个ESLint 配置对象包括的规则含义是：</p><p>semi: &quot;error&quot;, 强制在语句末尾使用分号。如果没有分号，ESLint 将报告一个错误 &quot;prefer-const&quot;: &quot;error&quot; 1. 强制在可能的情况下使用 <code>const</code> 声明变量，而不是 <code>let</code>。如果使用 <code>let</code> 而变量未被修改，ESLint 将报告一个错误。</p><p>配置的确保所有语句都以分号结尾，并鼓励使用 <code>const</code> 来声明不会被修改的变量。</p><p>👉 <code>eslint.config.js</code>完整配置</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码import globals from &quot;globals&quot;;</span></span>
<span class="line"><span>import pluginJs from &quot;@eslint/js&quot;;</span></span>
<span class="line"><span>import pluginVue from &quot;eslint-plugin-vue&quot;;</span></span>
<span class="line"><span>import standard from &quot;eslint-config-standard&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default [</span></span>
<span class="line"><span>  // 指定文件匹配模式</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    files: [&quot;**/*.{js,mjs,cjs,ts,vue}&quot;],</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 指定全局变量和环境</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    languageOptions: {</span></span>
<span class="line"><span>      globals: globals.browser,</span></span>
<span class="line"><span>      ecmaVersion: 12, // 使用最新的 ECMAScript 语法</span></span>
<span class="line"><span>      sourceType: &quot;module&quot;, // 代码是 ECMAScript 模块</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 使用的扩展配置</span></span>
<span class="line"><span>  pluginJs.configs.recommended,</span></span>
<span class="line"><span>  pluginVue.configs[&quot;flat/essential&quot;],</span></span>
<span class="line"><span>  standard,</span></span>
<span class="line"><span>  // 自定义规则</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>      indent: [&quot;error&quot;, 2], // 缩进使用 2 个空格</span></span>
<span class="line"><span>      &quot;linebreak-style&quot;: [&quot;error&quot;, &quot;unix&quot;], // 使用 Unix 风格的换行符</span></span>
<span class="line"><span>      quotes: [&quot;error&quot;, &quot;single&quot;], // 使用单引号</span></span>
<span class="line"><span>      semi: [&quot;error&quot;, &quot;never&quot;], // 语句末尾不加分号</span></span>
<span class="line"><span>      &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, // 生产环境中警告 console 使用，开发环境中关闭规则</span></span>
<span class="line"><span>      &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, // 生产环境中警告 debugger 使用，开发环境中关闭规则</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>];</span></span></code></pre></div><h4 id="👉配置package-json脚本" tabindex="-1">👉配置<code>package.json</code>脚本 <a class="header-anchor" href="#👉配置package-json脚本" aria-label="Permalink to &quot;👉配置\`package.json\`脚本&quot;">​</a></h4><p>在我们的根目录 <code>package.json</code> 文件中，添加脚本，在本地开发或构建时运行 ESLint：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码{</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;lint&quot;: &quot;eslint . --ext .js,.mjs,.cjs,.ts,.vue&quot;,</span></span>
<span class="line"><span>    &quot;lint:fix&quot;: &quot;eslint . --ext .js,.mjs,.cjs,.ts,.vue --fix&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259421902-a09e6930-df06-4d96-a1c7-b0ec3e48c860.webp" alt=""></p><p>这里检测已经不再支持这种，所以我们换一下监测的命令和配置</p><p>🍎 那么我们检查代码和修复代码就可以使用</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码yarn lint</span></span>
<span class="line"><span>yarn lint:fix</span></span></code></pre></div><h4 id="👉配置vite-config-ts之中的eslint" tabindex="-1">👉配置vite.config.ts之中的Eslint <a class="header-anchor" href="#👉配置vite-config-ts之中的eslint" aria-label="Permalink to &quot;👉配置vite.config.ts之中的Eslint&quot;">​</a></h4><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码// 导入Eslint插件</span></span>
<span class="line"><span>import eslintPlugin from &#39;vite-plugin-eslint&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plugins: [</span></span>
<span class="line"><span>     // eslint插件配置</span></span>
<span class="line"><span>    eslintPlugin({</span></span>
<span class="line"><span>        include: [&#39;src/**/*.js&#39;, &#39;src/**/*.vue&#39;, &#39;src/**/*.ts&#39;],    // 指定需要检查的文件</span></span>
<span class="line"><span>        exclude: [&#39;node_modules/**&#39;, &#39;dist/**&#39;],    // 指定不需要检查的文件</span></span>
<span class="line"><span>        fix: true,    // 是否自动修复</span></span>
<span class="line"><span>        cache: false    // 是否启用缓存</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>]</span></span></code></pre></div><h4 id="👉配置prettier-config-js" tabindex="-1">👉配置prettier.config.js <a class="header-anchor" href="#👉配置prettier-config-js" aria-label="Permalink to &quot;👉配置prettier.config.js&quot;">​</a></h4><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码module.exports = {</span></span>
<span class="line"><span>  printWidth: 100, // 最大行长规则通常设置为 100 或 120。</span></span>
<span class="line"><span>  tabWidth: 2, // 指定每个标签缩进级别的空格数。</span></span>
<span class="line"><span>  useTabs: false, // 使用制表符而不是空格缩进行。</span></span>
<span class="line"><span>  semi: false, // true（默认）: 在每条语句的末尾添加一个分号。false：仅在可能导致 ASI 失败的行的开头添加分号。</span></span>
<span class="line"><span>  vueIndentScriptAndStyle: true, // Vue 文件脚本和样式标签缩进</span></span>
<span class="line"><span>  singleQuote: true, // 使用单引号而不是双引号</span></span>
<span class="line"><span>  quoteProps: &#39;as-needed&#39;, // 引用对象中的属性时，仅在需要时在对象属性周围添加引号。</span></span>
<span class="line"><span>  bracketSpacing: true, // 在对象文字中的括号之间打印空格。</span></span>
<span class="line"><span>  trailingComma: &#39;none&#39;, // &quot;none&quot;:没有尾随逗号。&quot;es5&quot;: 在 ES5 中有效的尾随逗号（对象、数组等），TypeScript 中的类型参数中没有尾随逗号。&quot;all&quot;- 尽可能使用尾随逗号。</span></span>
<span class="line"><span>  bracketSameLine: false, // 将&gt;多行 HTML（HTML、JSX、Vue、Angular）元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭合元素）。</span></span>
<span class="line"><span>  jsxSingleQuote: false, // 在 JSX 中使用单引号而不是双引号。</span></span>
<span class="line"><span>  arrowParens: &#39;always&#39;, // 在唯一的箭头函数参数周围始终包含括号。</span></span>
<span class="line"><span>  insertPragma: false, // 插入编译指示</span></span>
<span class="line"><span>  requirePragma: false, // 需要编译指示</span></span>
<span class="line"><span>  proseWrap: &#39;never&#39;, // 如果散文超过打印宽度，则换行</span></span>
<span class="line"><span>  htmlWhitespaceSensitivity: &#39;strict&#39;, // 所有标签周围的空格（或缺少空格）被认为是重要的。</span></span>
<span class="line"><span>  endOfLine: &#39;lf&#39;, // 确保在文本文件中仅使用 ( \\n)换行，常见于 Linux 和 macOS 以及 git repos 内部。</span></span>
<span class="line"><span>  rangeStart: 0, // 格式化文件时，回到包含所选语句的第一行的开头。</span></span>
<span class="line"><span>};</span></span></code></pre></div><h4 id="👉配置忽略eslint-eslintignore-eslint-9-9-0废弃-不再采用-仅供参考" tabindex="-1">👉配置忽略eslint（.eslintignore--ESLint@9.9.0废弃--不再采用，仅供参考） <a class="header-anchor" href="#👉配置忽略eslint-eslintignore-eslint-9-9-0废弃-不再采用-仅供参考" aria-label="Permalink to &quot;👉配置忽略eslint（.eslintignore--ESLint@9.9.0废弃--不再采用，仅供参考）&quot;">​</a></h4><h5 id="最新版本-采用" tabindex="-1">最新版本（采用） <a class="header-anchor" href="#最新版本-采用" aria-label="Permalink to &quot;最新版本（采用）&quot;">​</a></h5><p>最新官方已经废弃，直接写进eslint.config.js文件，举个例子：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码 {</span></span>
<span class="line"><span>    ignores: [</span></span>
<span class="line"><span>      &#39;/dist&#39;,</span></span>
<span class="line"><span>      &#39;.idea&#39;,</span></span>
<span class="line"><span>      &#39;.vscode&#39;,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>我的配置</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码export default [</span></span>
<span class="line"><span>  // 指定文件匹配模式 和语言选项</span></span>
<span class="line"><span>  {files: [&#39;**/*.{js,mjs,cjs,ts,vue}&#39;]}, //[&quot;**/*.vue&quot;]</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  // 指定全局变量和环境</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    languageOptions: {</span></span>
<span class="line"><span>      globals: globals.browser,</span></span>
<span class="line"><span>      ecmaVersion: 12, // 使用最新的 ECMAScript 语法</span></span>
<span class="line"><span>      sourceType: &#39;module&#39;, // 代码是 ECMAScript 模块</span></span>
<span class="line"><span>      parserOptions: {parser: tseslint.parser}, // 使用 TypeScript 解析器</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  // 使用的扩展配置 解析器选项</span></span>
<span class="line"><span>  pluginJs.configs.recommended,</span></span>
<span class="line"><span>  ...tseslint.configs.recommended,</span></span>
<span class="line"><span>  ...pluginVue.configs[&#39;flat/essential&#39;],</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>  // 自定义规则</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>      &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;, // 生产环境中警告 console 使用，开发环境中关闭规则</span></span>
<span class="line"><span>      &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;, // 生产环境中警告 debugger 使用，开发环境中关闭规则</span></span>
<span class="line"><span>      indent: [&#39;warn&#39;, 2], // 缩进使用 2 个空格 而不是 4 个  error </span></span>
<span class="line"><span>      &#39;linebreak-style&#39;: [&#39;warn&#39;, &#39;windows&#39;], // 使用 Unix 风格的换行符</span></span>
<span class="line"><span>      quotes: [&#39;warn&#39;, &#39;single&#39;], // 使用单引号</span></span>
<span class="line"><span>      semi: [&#39;warn&#39;, &#39;never&#39;], // 语句末尾不加分号</span></span>
<span class="line"><span>      &#39;no-unused-vars&#39;: &#39;off&#39;, // 关闭未使用变量警告</span></span>
<span class="line"><span>      &#39;@typescript-eslint/no-unused-vars&#39;:&#39;off&#39;, // 关闭未使用变量警告</span></span>
<span class="line"><span>      &#39;vue/multi-word-component-names&#39;: &#39;off&#39;, //Vue 组件的名称应该是多词的，以提高可读性和维护性</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 忽略文件</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    ignores: [</span></span>
<span class="line"><span>      &#39;**/dist&#39;,</span></span>
<span class="line"><span>      &#39;./src/main.ts&#39;,</span></span>
<span class="line"><span>      &#39;.vscode&#39;,</span></span>
<span class="line"><span>      &#39;.idea&#39;,</span></span>
<span class="line"><span>      &#39;*.sh&#39;,</span></span>
<span class="line"><span>      &#39;**/node_modules&#39;,</span></span>
<span class="line"><span>      &#39;*.md&#39;,</span></span>
<span class="line"><span>      &#39;*.woff&#39;,</span></span>
<span class="line"><span>      &#39;*.woff&#39;,</span></span>
<span class="line"><span>      &#39;*.ttf&#39;,</span></span>
<span class="line"><span>      &#39;yarn.lock&#39;,</span></span>
<span class="line"><span>      &#39;package-lock.json&#39;,</span></span>
<span class="line"><span>      &#39;/public&#39;,</span></span>
<span class="line"><span>      &#39;/docs&#39;,</span></span>
<span class="line"><span>      &#39;**/output&#39;,</span></span>
<span class="line"><span>      &#39;.husky&#39;,</span></span>
<span class="line"><span>      &#39;.local&#39;,</span></span>
<span class="line"><span>      &#39;/bin&#39;,</span></span>
<span class="line"><span>      &#39;Dockerfile&#39;,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>]</span></span></code></pre></div><h5 id="旧版本-不采用" tabindex="-1">旧版本（不采用） <a class="header-anchor" href="#旧版本-不采用" aria-label="Permalink to &quot;旧版本（不采用）&quot;">​</a></h5><p>之前我们在项目之中都是根目录下新建.eslintignore文件 和 .prettierignore文件，这个文件是与src同级的，主要是用来配置语法检测和代码风格的忽略部分</p><p>这里是eslint忽略部分</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码</span></span>
<span class="line"><span>*.sh</span></span>
<span class="line"><span>node_modules</span></span>
<span class="line"><span>*.md</span></span>
<span class="line"><span>*.woff</span></span>
<span class="line"><span>*.ttf</span></span>
<span class="line"><span>.vscode</span></span>
<span class="line"><span>.idea</span></span>
<span class="line"><span>dist</span></span>
<span class="line"><span>/public</span></span>
<span class="line"><span>/docs</span></span>
<span class="line"><span>.husky</span></span>
<span class="line"><span>.local</span></span>
<span class="line"><span>/bin</span></span>
<span class="line"><span>Dockerfile</span></span></code></pre></div><h4 id="👉配置忽略prettier-prettierignore-eslint-9-9-0废弃-不再采用-仅供参考" tabindex="-1">👉配置忽略prettier（.prettierignore--ESLint@9.9.0废弃--不再采用，仅供参考） <a class="header-anchor" href="#👉配置忽略prettier-prettierignore-eslint-9-9-0废弃-不再采用-仅供参考" aria-label="Permalink to &quot;👉配置忽略prettier（.prettierignore--ESLint@9.9.0废弃--不再采用，仅供参考）&quot;">​</a></h4><p>这里是prettier忽略部分</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码/dist/*</span></span>
<span class="line"><span>.local</span></span>
<span class="line"><span>.output.js</span></span>
<span class="line"><span>/node_modules/**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**/*.svg</span></span>
<span class="line"><span>**/*.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/public/*</span></span></code></pre></div><p>ok！ 这里已经完成了</p><h3 id="_6、eslint-config-js文件配置属性" tabindex="-1">6、eslint.config.js文件配置属性 <a class="header-anchor" href="#_6、eslint-config-js文件配置属性" aria-label="Permalink to &quot;6、eslint.config.js文件配置属性&quot;">​</a></h3><h4 id="文件配置与配置规则" tabindex="-1">文件配置与配置规则 <a class="header-anchor" href="#文件配置与配置规则" aria-label="Permalink to &quot;文件配置与配置规则&quot;">​</a></h4><p>🍓 <code>Vue</code> 部分<code>overrides</code></p><p>这里我们看看对于<code>Vue</code>的一些配置，将这些 Vue 配置项放到 ESLint 配置文件的 <code>rules</code> 部分</p><p>案例 <code>rules</code> 部分</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码module.exports = {</span></span>
<span class="line"><span>    extends: [</span></span>
<span class="line"><span>        &#39;plugin:vue/vue3-recommended&#39;, // 或其他 Vue 规则扩展</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>        &#39;vue/operator-linebreak&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/singleline-html-element-content-newline&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/multi-word-component-names&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/no-v-model-argument&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/require-default-prop&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/require-prop-types&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/html-self-closing&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/quote-props&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/no-irregular-whitespace&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/prop-name-casing&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/html-indent&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>        &#39;vue/no-reserved-component-names&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    // 其他配置</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>完整 <code>rules</code> 部分</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码{</span></span>
<span class="line"><span>    vue:</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        overrides:</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &#39;vue/operator-linebreak&#39;: &#39;off&#39;, </span></span>
<span class="line"><span>            //关闭操作符换行规则的检查。默认ESLint会要求你在操作符前后换行，配置项可关闭这种检查。</span></span>
<span class="line"><span>            &#39;vue/singleline-html-element-content-newline&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭单行 HTML 元素内容新行的规则。默认情况下，ESLint 可能会要求在单行 HTML 元素的内容后面有新行，这个配置项可以关闭这种要求。</span></span>
<span class="line"><span>            &#39;vue/multi-word-component-names&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭组件名称必须是多单词的规则。默认情况下，ESLint 可能会要求组件名称由多个单词组成，这个配置项允许单词少于两个的组件名称。</span></span>
<span class="line"><span>            &#39;vue/no-v-model-argument&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭对 \`v-model\` 参数使用的规则。默认情况下，ESLint 可能会对 \`v-model\` 的参数使用进行检查，这个配置项可以关闭这种检查。</span></span>
<span class="line"><span>            &#39;vue/require-default-prop&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭要求组件 \`prop\` 必须有默认值的规则。默认情况下，ESLint 可能会要求每个 \`prop\` 都有一个默认值，这个配置项允许没有默认值的 \`prop\`。</span></span>
<span class="line"><span>            &#39;vue/require-prop-types&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭要求组件 \`prop\` 必须有类型定义的规则。默认情况下，ESLint 可能会要求每个 \`prop\` 都有一个类型定义，这个配置项允许没有类型定义的 \`prop\`。</span></span>
<span class="line"><span>            &#39;vue/html-self-closing&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭 HTML 自闭合标签规则的检查。默认情况下，ESLint 可能会要求 HTML 标签自闭合的风格，这个配置项可以关闭这种检查。</span></span>
<span class="line"><span>            &#39;vue/quote-props&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭属性名引号使用规则的检查。默认情况下，ESLint 可能会要求在对象属性名周围使用引号，这个配置项可以关闭这种检查。</span></span>
<span class="line"><span>            &#39;vue/no-irregular-whitespace&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭检查不规则空白字符的规则。默认情况下，ESLint 可能会检查代码中是否有不规则的空白字符，这个配置项可以关闭这种检查。</span></span>
<span class="line"><span>            &#39;vue/prop-name-casing&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭 \`prop\` 名称大小写规则的检查。默认情况下，ESLint 可能会要求 \`prop\` 名称遵循特定的大小写规则，这个配置项可以关闭这种要求。</span></span>
<span class="line"><span>            &#39;vue/html-indent&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭 HTML 缩进规则的检查。默认情况下，ESLint 可能会要求 HTML 标签按照特定的缩进方式对齐，这个配置项可以关闭这种检查。</span></span>
<span class="line"><span>            &#39;vue/no-reserved-component-names&#39;: &#39;off&#39;,</span></span>
<span class="line"><span>            //关闭对保留组件名称的检查。默认情况下，ESLint 可能会禁止使用某些保留的组件名称，这个配置项允许使用这些名称。</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    typescript: true,</span></span>
<span class="line"><span>},</span></span></code></pre></div><p>🍓 <code>React</code> 部分</p><p>🍓 rules规则属性部分</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码// 自定义规则</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>rules: {</span></span>
<span class="line"><span>  &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;, // 生产环境中警告 console 使用，开发环境中关闭规则</span></span>
<span class="line"><span>  &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;, // 生产环境中警告 debugger 使用，开发环境中关闭规则</span></span>
<span class="line"><span>  indent: [&#39;warn&#39;, 2], // 缩进使用 2 个空格 而不是 4 个  error </span></span>
<span class="line"><span>  &#39;linebreak-style&#39;: [&#39;warn&#39;, &#39;windows&#39;], // 使用 Unix 风格的换行符</span></span>
<span class="line"><span>  quotes: [&#39;warn&#39;, &#39;single&#39;], // 使用单引号</span></span>
<span class="line"><span>  semi: [&#39;warn&#39;, &#39;never&#39;], // 语句末尾不加分号</span></span>
<span class="line"><span>  &#39;no-unused-vars&#39;: &#39;off&#39;, // 关闭未使用变量警告</span></span>
<span class="line"><span>  &#39;@typescript-eslint/no-unused-vars&#39;:&#39;off&#39;, // 关闭未使用变量警告</span></span>
<span class="line"><span>  &#39;vue/multi-word-component-names&#39;: &#39;off&#39;, //Vue 组件的名称应该是多词的，以提高可读性和维护性</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>},</span></span></code></pre></div><h3 id="_7、vscode配置" tabindex="-1">7、vscode配置 <a class="header-anchor" href="#_7、vscode配置" aria-label="Permalink to &quot;7、vscode配置&quot;">​</a></h3><p>接下来我们就在自己的项目code编辑器之中配置eslint和prettier部分，并且在自己的<strong>VSCode</strong> 中无缝集成 ESLint</p><h4 id="插件安装配置" tabindex="-1">插件安装配置 <a class="header-anchor" href="#插件安装配置" aria-label="Permalink to &quot;插件安装配置&quot;">​</a></h4><p>安装vscode插件</p><p>👉 安装eslint插件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259422937-f6d02ff2-4147-4702-9fcc-a4e774577972.webp" alt=""></p><p>👉 安装prettier插件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259422937-0491360e-8533-4ba4-b752-4437ea08db4c.webp" alt=""></p><p>👉 vscode自动保存代码并进行格式化</p><p>这段配置的作用是帮助我们启用保存文件时自动修复 ESLint 错误，并在保存时进行验证</p><p>在vscode中进行配置，按住ctrl+shift+p，输入setting，打开setting.json，完成以下配置：</p><p><code>setting.json</code>配置</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码{</span></span>
<span class="line"><span>  &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;, // window be show of level in ide</span></span>
<span class="line"><span>  &quot;git.ignoreMissingGitWarning&quot;: true,</span></span>
<span class="line"><span>  &quot;explorer.confirmDelete&quot;: false,</span></span>
<span class="line"><span>  &quot;workbench.colorTheme&quot;: &quot;Monokai&quot;,</span></span>
<span class="line"><span>  &quot;workbench.colorCustomizations&quot;: {</span></span>
<span class="line"><span>      &quot;[Monokai]&quot;: {</span></span>
<span class="line"><span>      &quot;editor.background&quot;: &quot;#1a2c1c&quot;,</span></span>
<span class="line"><span>      &quot;sideBar.background&quot;: &quot;#2a3b2d&quot;,</span></span>
<span class="line"><span>      &quot;activityBar.background&quot;: &quot;#7154978a&quot;,</span></span>
<span class="line"><span>      &quot;icon.foreground&quot;: &quot;#893ecf&quot;,</span></span>
<span class="line"><span>      &quot;activityBar.inactiveForeground&quot;: &quot;#ffee00b4&quot;,</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;docthis.authorName&quot;: &quot;tomAnny&quot;,</span></span>
<span class="line"><span>  &quot;docthis.includeDescriptionTag&quot;: true,</span></span>
<span class="line"><span>  &quot;docthis.includeDateTag&quot;: true,</span></span>
<span class="line"><span>  &quot;docthis.includeAuthorTag&quot;: true,</span></span>
<span class="line"><span>  &quot;vsicons.dontShowNewVersionMessage&quot;: true,</span></span>
<span class="line"><span>  &quot;terminal.integrated.rendererType&quot;: &quot;dom&quot;,</span></span>
<span class="line"><span>  // vscode默认启用了根据文件类型自动设置tabsize的选项</span></span>
<span class="line"><span>  &quot;editor.detectIndentation&quot;: false,</span></span>
<span class="line"><span>  // 重新设定tabsize</span></span>
<span class="line"><span>  &quot;editor.tabSize&quot;: 2,</span></span>
<span class="line"><span>  // #每次保存的时候自动格式化 </span></span>
<span class="line"><span>  &quot;editor.formatOnSave&quot;: true,</span></span>
<span class="line"><span>  &quot;editor.formatOnType&quot;: true,</span></span>
<span class="line"><span>  // 强制单引号</span></span>
<span class="line"><span>  &quot;prettier.singleQuote&quot;: true,</span></span>
<span class="line"><span>  &quot;prettier.semi&quot;: false,</span></span>
<span class="line"><span>  // 尽可能控制尾随逗号的打印</span></span>
<span class="line"><span>  &quot;prettier.trailingComma&quot;: &quot;all&quot;,</span></span>
<span class="line"><span>  // #这个按用户自身习惯选择-- prettier 或者js-beautify-html</span></span>
<span class="line"><span>  &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span></span>
<span class="line"><span>  // #让vue中的js按编辑器自带的ts格式进行格式化 </span></span>
<span class="line"><span>  &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,</span></span>
<span class="line"><span>  &quot;html.format.indentHandlebars&quot;: true,</span></span>
<span class="line"><span>  &quot;javascript.preferences.quoteStyle&quot;: &quot;single&quot;,</span></span>
<span class="line"><span>  &quot;typescript.preferences.quoteStyle&quot;: &quot;single&quot;,</span></span>
<span class="line"><span>  &quot;html.format.enable&quot;: false,</span></span>
<span class="line"><span>  &quot;html.format.preserveNewLines&quot;: false,</span></span>
<span class="line"><span>  &quot;diffEditor.ignoreTrimWhitespace&quot;: false,</span></span>
<span class="line"><span>  &quot;vetur.format.defaultFormatterOptions&quot;: {</span></span>
<span class="line"><span>    &quot;js-beautify-html&quot;: {</span></span>
<span class="line"><span>      &quot;wrap_attributes&quot;: &quot;force-aligned&quot;</span></span>
<span class="line"><span>      // #vue组件中html代码格式化样式</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  //防止VSCode启动带有node_modules的项目的时候很卡的问题</span></span>
<span class="line"><span>  &quot;search.followSymlinks&quot;: false,</span></span>
<span class="line"><span>  &quot;files.autoSave&quot;: &quot;onWindowChange&quot;,</span></span>
<span class="line"><span>  &quot;[vue]&quot;: {</span></span>
<span class="line"><span>    //&quot;editor.defaultFormatter&quot;: &quot;octref.vetur&quot;</span></span>
<span class="line"><span>    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;[javascript]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;[scss]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;[html]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;[css]&quot;: {</span></span>
<span class="line"><span>    &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot;</span></span>
<span class="line"><span> },</span></span>
<span class="line"><span>  // #每次保存的时候将代码按eslint格式进行修复</span></span>
<span class="line"><span>  &quot;editor.codeActionsOnSave&quot;: {</span></span>
<span class="line"><span>    &quot;source.fixAll.eslint&quot;: true</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;window.zoomLevel&quot;: -2,</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="扁平模式使用" tabindex="-1">扁平模式使用 <a class="header-anchor" href="#扁平模式使用" aria-label="Permalink to &quot;扁平模式使用&quot;">​</a></h4><p>使用VS Code的ESLint扩展，使用扁平模式需要在插件设置中勾选<code>Use Flat Config</code>：</p><p>直接设置中搜索<code>Use Flat Config</code>,勾选</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1727259423023-67195296-c175-4ddb-a725-a7c65a3806bb.webp" alt=""></p><h3 id="_8、新旧版本配置区别" tabindex="-1">8、新旧版本配置区别 <a class="header-anchor" href="#_8、新旧版本配置区别" aria-label="Permalink to &quot;8、新旧版本配置区别&quot;">​</a></h3><h5 id="使用-eslintrc-js-旧版本" tabindex="-1">使用 <code>.eslintrc.js</code>（旧版本） <a class="header-anchor" href="#使用-eslintrc-js-旧版本" aria-label="Permalink to &quot;使用 \`.eslintrc.js\`（旧版本）&quot;">​</a></h5><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码//官方默认</span></span>
<span class="line"><span>// .eslintrc.js</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    root: true,</span></span>
<span class="line"><span>    env: {</span></span>
<span class="line"><span>        browser: true,</span></span>
<span class="line"><span>        es2021: true,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    extends: [</span></span>
<span class="line"><span>        &#39;eslint:recommended&#39;,</span></span>
<span class="line"><span>        &#39;plugin:vue/vue3-essential&#39;,</span></span>
<span class="line"><span>        &#39;@vue/typescript/recommended&#39;,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    parserOptions: {</span></span>
<span class="line"><span>        ecmaVersion: 12,</span></span>
<span class="line"><span>        sourceType: &#39;module&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>        &#39;no-console&#39;: &#39;warn&#39;,</span></span>
<span class="line"><span>        &#39;no-unused-vars&#39;: &#39;warn&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>//自定义</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    root: true,</span></span>
<span class="line"><span>    env: {</span></span>
<span class="line"><span>        browser: true,</span></span>
<span class="line"><span>        es2021: true,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    parser: &#39;vue-eslint-parser&#39;,</span></span>
<span class="line"><span>    parserOptions: {</span></span>
<span class="line"><span>        parser: &#39;@typescript-eslint/parser&#39;,</span></span>
<span class="line"><span>        ecmaVersion: 12,</span></span>
<span class="line"><span>        sourceType: &#39;module&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    extends: [</span></span>
<span class="line"><span>        &#39;eslint:recommended&#39;,</span></span>
<span class="line"><span>        &#39;plugin:vue/vue3-essential&#39;,</span></span>
<span class="line"><span>        &#39;@vue/typescript/recommended&#39;,  // 如果你使用 TypeScript</span></span>
<span class="line"><span>        &#39;plugin:prettier/recommended&#39;,  // 如果你使用 Prettier</span></span>
<span class="line"><span>        &#39;prettier&#39;</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>        // 在这里添加你的自定义规则</span></span>
<span class="line"><span>        semi: [&#39;error&#39;, &#39;always&#39;],</span></span>
<span class="line"><span>        &#39;prefer-const&#39;: &#39;error&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>};</span></span></code></pre></div><h5 id="使用-eslint-config-js-新版本" tabindex="-1">使用 <code>eslint.config.js</code>：(新版本) <a class="header-anchor" href="#使用-eslint-config-js-新版本" aria-label="Permalink to &quot;使用 \`eslint.config.js\`：(新版本)&quot;">​</a></h5><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码// eslint.config.js</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>    root: true,</span></span>
<span class="line"><span>    env: {</span></span>
<span class="line"><span>        browser: true,</span></span>
<span class="line"><span>        es2021: true,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    extends: [</span></span>
<span class="line"><span>        &#39;eslint:recommended&#39;,</span></span>
<span class="line"><span>        &#39;plugin:vue/vue3-essential&#39;,</span></span>
<span class="line"><span>        &#39;@vue/typescript/recommended&#39;,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    parserOptions: {</span></span>
<span class="line"><span>        ecmaVersion: 12,</span></span>
<span class="line"><span>        sourceType: &#39;module&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    rules: {</span></span>
<span class="line"><span>        &#39;no-console&#39;: &#39;warn&#39;,</span></span>
<span class="line"><span>        &#39;no-unused-vars&#39;: &#39;warn&#39;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>};</span></span></code></pre></div><h4 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h4><p>这里很多人都问我自己项目使用什么，可以先看看环境，然后看一下下面区别：</p><p>🍓.eslintrc.js和eslint.config.js区别：</p><p><code>.eslintrc.js （CommonJS 模块）</code> vs. <code>eslint.config.js（ES Modules ）</code></p><ul><li><code>**.eslintrc.js**</code>: ESLint 的传统配置文件名，被广泛使用。格式支持 CommonJS 模块，配置代码通常使用 <code>module.exports</code> 和 <code>require</code>，老项目使用。</li><li><code>**eslint.config.js**</code>: ESLint 引入的一个新的配置文件名。允许使用 ES Modules 语法（如 <code>import</code> 和 <code>export</code>）。可使用现代 JavaScript 特性或与其他工具兼容，较新写法，更符合现代 JavaScript 项目的风格。</li></ul><p>🍓 选择建议</p><ol><li><strong>一致性</strong>: 项目已有 <code>.eslintrc.js</code> 文件，继续使用，<code>.eslintrc.js</code> 和 <code>eslint.config.js</code> 可以互相兼容。</li><li><strong>现代化</strong>: 项目使用更现代的 ES Modules 语法，使用更现代的 JavaScript 特性，使用<code>eslint.config.js</code> 。</li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>最后总结：不用也罢，其实不用也没啥，根本不影响！</p><p>在Nuxt的部分之中更加建议使用</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>js</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 代码解读</span></span>
<span class="line"><span>复制代码yarn add @antdfu/eslint-config</span></span></code></pre></div><p>作者：林太白<br> 链接：<a href="https://juejin.cn/post/7402922513888460852" target="_blank" rel="noreferrer">https://juejin.cn/post/7402922513888460852</a><br> 来源：稀土掘金<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>`,148),i=[l];function t(o,c,r,u,d,h){return a(),n("div",null,i)}const f=s(e,[["render",t]]);export{q as __pageData,f as default};
