import{_ as a,c as n,o as e,ag as i}from"./chunks/framework.DnwzncJk.js";const g=JSON.parse('{"title":"TS特性","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/ts/ts-特性.md","filePath":"src/ts/ts-特性.md","lastUpdated":1752135734000}'),p={name:"src/ts/ts-特性.md"};function t(l,s,c,o,r,d){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="ts特性" tabindex="-1">TS特性 <a class="header-anchor" href="#ts特性" aria-label="Permalink to &quot;TS特性&quot;">​</a></h1><p>TS围绕类型系统和代码结构增加了许多关键功能</p><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><ul><li><strong>兼容 JavaScript</strong>：TS是 JavaScript 的超集，兼容js写法， JavaScript 项目可以逐步迁移到 TypeScript，无需完全重写。</li><li><strong>静态类型检查</strong>：TypeScript 在编译时就会检查代码的类型是否匹配发现错误（例如拼写错误或类型不一致）</li><li><strong>类型推断</strong>：TypeScript 能自动推断变量的类型。声明一个变量并赋值时根据赋值推断这个变量的类型，不需要每次都显式声明类型。</li><li><strong>接口和类型定义</strong>：TypeScript 提供了 <code>interface</code> 和 <code>type</code> 关键字，允许定义复杂的数据结构</li><li><strong>类和模块支持</strong>：TypeScript 支持面向对象编程中的类（class）概念，增加了构造函数、继承、访问控制修饰符（如 <code>public</code>、<code>private</code>、<code>protected</code>），支持 ES 模块化规范。</li><li><strong>工具和编辑器支持</strong>：良好的编辑器支持，与 Visual Studio Code 集成时，能提供智能提示、自动补全、重构等工具</li></ul><h2 id="ts增加的主要功能" tabindex="-1">TS增加的主要功能 <a class="header-anchor" href="#ts增加的主要功能" aria-label="Permalink to &quot;TS增加的主要功能&quot;">​</a></h2><h3 id="_1-静态类型" tabindex="-1">1. <strong>静态类型</strong> <a class="header-anchor" href="#_1-静态类型" aria-label="Permalink to &quot;1. **静态类型**&quot;">​</a></h3><p>TypeScript 的最大特性就是增加了静态类型系统。在 TypeScript 中，开发者可以显式地声明变量、参数、返回值的类型，在编译时捕获潜在的类型错误。</p><p>常见类型包括 <code>number</code>、<code>string</code>、<code>boolean</code>、<code>array</code>、<code>tuple</code>、<code>enum</code> 等，也支持自定义类型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_2-类型推断" tabindex="-1">2. <strong>类型推断</strong> <a class="header-anchor" href="#_2-类型推断" aria-label="Permalink to &quot;2. **类型推断**&quot;">​</a></h3><p>TypeScript 可以自动推断变量类型，即使不显式声明类型，TypeScript 也会根据变量的赋值内容来推断类型，从而在大多数情况下减少类型注解的书写量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推断为 string</span></span></code></pre></div><h3 id="_3-接口-interfaces" tabindex="-1">3. <strong>接口 (Interfaces)</strong> <a class="header-anchor" href="#_3-接口-interfaces" aria-label="Permalink to &quot;3. **接口 (Interfaces)**&quot;">​</a></h3><p>TypeScript 提供了接口，允许定义复杂的对象结构。接口可以定义属性和方法，还可以通过 <code>implements</code> 关键字实现接口，或者通过 <code>extends</code> 进行扩展，便于定义复杂的数据类型。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Person {</span></span>
<span class="line"><span>  name: string;</span></span>
<span class="line"><span>  age: number;</span></span>
<span class="line"><span>  greet(): void;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Student implements Person {</span></span>
<span class="line"><span>  constructor(public name: string, public age: number) {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  greet() {</span></span>
<span class="line"><span>    console.log(\`Hello, my name is \${this.name}\`);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-类型别名-type-aliases" tabindex="-1">4. <strong>类型别名 (Type Aliases)</strong> <a class="header-anchor" href="#_4-类型别名-type-aliases" aria-label="Permalink to &quot;4. **类型别名 (Type Aliases)**&quot;">​</a></h3><p>类型别名 (<code>type</code>) 可以为复杂的类型定义简短的别名，便于代码复用。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>type StringOrNumber = string | number;</span></span>
<span class="line"><span>let value: StringOrNumber = 42;</span></span></code></pre></div><h3 id="_5-枚举-enums" tabindex="-1">5. <strong>枚举 (Enums)</strong> <a class="header-anchor" href="#_5-枚举-enums" aria-label="Permalink to &quot;5. **枚举 (Enums)**&quot;">​</a></h3><p>TypeScript 引入了 <code>enum</code> 类型，用于定义一组命名的常量，提高代码的可读性。枚举在 JavaScript 中没有直接的对应。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>enum Direction {</span></span>
<span class="line"><span>  Up,</span></span>
<span class="line"><span>  Down,</span></span>
<span class="line"><span>  Left,</span></span>
<span class="line"><span>  Right,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>let dir: Direction = Direction.Up;</span></span></code></pre></div><h3 id="_6-元组-tuples" tabindex="-1">6. <strong>元组 (Tuples)</strong> <a class="header-anchor" href="#_6-元组-tuples" aria-label="Permalink to &quot;6. **元组 (Tuples)**&quot;">​</a></h3><p>元组允许定义具有固定数量和类型的数组。它适用于需要固定数据结构的场景，比如坐标或 RGB 颜色值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><h3 id="_7-访问控制修饰符-access-modifiers" tabindex="-1">7. <strong>访问控制修饰符 (Access Modifiers)</strong> <a class="header-anchor" href="#_7-访问控制修饰符-access-modifiers" aria-label="Permalink to &quot;7. **访问控制修饰符 (Access Modifiers)**&quot;">​</a></h3><p>TypeScript 在类中提供了 <code>public</code>、<code>private</code> 和 <code>protected</code> 修饰符，允许控制属性或方法的可见性，支持更好的封装。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class Person {</span></span>
<span class="line"><span>  private name: string;</span></span>
<span class="line"><span>  protected age: number;</span></span>
<span class="line"><span>  public constructor(name: string, age: number) {</span></span>
<span class="line"><span>    this.name = name;</span></span>
<span class="line"><span>    this.age = age;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_8-抽象类-abstract-classes" tabindex="-1">8. <strong>抽象类 (Abstract Classes)</strong> <a class="header-anchor" href="#_8-抽象类-abstract-classes" aria-label="Permalink to &quot;8. **抽象类 (Abstract Classes)**&quot;">​</a></h3><p>TypeScript 支持抽象类，抽象类不能直接实例化，需要由子类实现。抽象类适用于定义通用行为和抽象方法的类层次结构。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>abstract class Animal {</span></span>
<span class="line"><span>  abstract makeSound(): void;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Dog extends Animal {</span></span>
<span class="line"><span>  makeSound() {</span></span>
<span class="line"><span>    console.log(&quot;Woof!&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_9-泛型-generics" tabindex="-1">9. <strong>泛型 (Generics)</strong> <a class="header-anchor" href="#_9-泛型-generics" aria-label="Permalink to &quot;9. **泛型 (Generics)**&quot;">​</a></h3><p>TypeScript 支持泛型，允许在类、接口和函数中使用参数化类型，使得代码可以适应不同的类型需求，同时保持类型安全。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function identity&lt;T&gt;(value: T): T {</span></span>
<span class="line"><span>  return value;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let num = identity&lt;number&gt;(42);</span></span></code></pre></div><h3 id="_10-模块和命名空间" tabindex="-1">10. <strong>模块和命名空间</strong> <a class="header-anchor" href="#_10-模块和命名空间" aria-label="Permalink to &quot;10. **模块和命名空间**&quot;">​</a></h3><p>TypeScript 提供了基于 ES6 的模块系统，使用 <code>import</code> 和 <code>export</code> 导入和导出模块。此外，TypeScript 还支持命名空间（Namespace），用于组织代码和避免命名冲突。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// math.ts</span></span>
<span class="line"><span>export function add(a: number, b: number): number {</span></span>
<span class="line"><span>  return a + b;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// main.ts</span></span>
<span class="line"><span>import { add } from &quot;./math&quot;;</span></span>
<span class="line"><span>console.log(add(2, 3));</span></span></code></pre></div><h3 id="_11-类型守卫-type-guards" tabindex="-1">11. <strong>类型守卫 (Type Guards)</strong> <a class="header-anchor" href="#_11-类型守卫-type-guards" aria-label="Permalink to &quot;11. **类型守卫 (Type Guards)**&quot;">​</a></h3><p>TypeScript 提供了类型守卫，可以在代码中检查变量类型，帮助编译器推断更加具体的类型。这对于联合类型尤为重要。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function printId(id: string | number) {</span></span>
<span class="line"><span>  if (typeof id === &quot;string&quot;) {</span></span>
<span class="line"><span>    console.log(id.toUpperCase());</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    console.log(id.toFixed(2));</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_12-可选链和空值合并运算符" tabindex="-1">12. <strong>可选链和空值合并运算符</strong> <a class="header-anchor" href="#_12-可选链和空值合并运算符" aria-label="Permalink to &quot;12. **可选链和空值合并运算符**&quot;">​</a></h3><p>TypeScript 增加了 JavaScript 的可选链 (<code>?.</code>) 和空值合并运算符 (<code>??</code>)，简化了代码中对可能为 <code>null</code> 或 <code>undefined</code> 值的处理。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let user = { name: &quot;Alice&quot;, address: { city: &quot;Wonderland&quot; } };</span></span>
<span class="line"><span>console.log(user?.address?.city); // 如果 address 存在则输出 city，否则返回 undefined</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let value = null;</span></span>
<span class="line"><span>console.log(value ?? &quot;default&quot;); // 如果 value 为 null 或 undefined，则返回 &quot;default&quot;</span></span></code></pre></div><h3 id="_13-类型兼容性和工具类型" tabindex="-1">13. <strong>类型兼容性和工具类型</strong> <a class="header-anchor" href="#_13-类型兼容性和工具类型" aria-label="Permalink to &quot;13. **类型兼容性和工具类型**&quot;">​</a></h3><p>TypeScript 提供了一些工具类型，如 <code>Partial</code>、<code>Pick</code>、<code>Readonly</code>、<code>Record</code> 等，这些类型可以帮助生成新的类型，简化类型定义。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在 TypeScript 中，Partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是一个内置的泛型工具类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">它可以将给定类型 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的所有属性变为可选</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这意味着我们可以创建一个类型，允许部分属性是缺失的，而不需要提供所有属性的值。</span></span></code></pre></div><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Todo {</span></span>
<span class="line"><span>  title: string;</span></span>
<span class="line"><span>  description: string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let partialTodo: Partial&lt;Todo&gt; = { title: &quot;Learn TypeScript&quot; }; // 可选属性 只需要title</span></span></code></pre></div><h3 id="_14-编译期错误检查" tabindex="-1">14. <strong>编译期错误检查</strong> <a class="header-anchor" href="#_14-编译期错误检查" aria-label="Permalink to &quot;14. **编译期错误检查**&quot;">​</a></h3><p>TypeScript 提供的编译期错误检查可以捕获 JavaScript 中不易发现的错误，如拼写错误、类型不匹配等，帮助提升代码质量。</p><h3 id="_15-es-新特性支持" tabindex="-1">15. <strong>ES 新特性支持</strong> <a class="header-anchor" href="#_15-es-新特性支持" aria-label="Permalink to &quot;15. **ES 新特性支持**&quot;">​</a></h3><p>TypeScript 提前支持了一些还未在所有环境中普及的 ES 特性，如装饰器（Decorators）、异步迭代器等，且能够将其编译成兼容 JavaScript 版本。</p><p>通过这些特性，TypeScript 提供了更安全、更结构化的代码能力，在大型项目和多人协作中尤其具有优势。</p>`,51)]))}const u=a(p,[["render",t]]);export{g as __pageData,u as default};
