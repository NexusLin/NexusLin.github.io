import{_ as s,c as i,o as e,ag as n}from"./chunks/framework.CqxIsSM8.js";const t="/images/vue-signals.png",g=JSON.parse('{"title":"VueConf2025携手vue3.6来啦（alpha版本 Vapor Mode+Alien Signals）","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/note/points/VueConf2025.md","filePath":"src/note/points/VueConf2025.md","lastUpdated":1752486718000}'),p={name:"src/note/points/VueConf2025.md"};function l(h,a,r,d,o,k){return e(),i("div",null,a[0]||(a[0]=[n(`<h1 id="vueconf2025携手vue3-6来啦-alpha版本-vapor-mode-alien-signals" tabindex="-1">VueConf2025携手vue3.6来啦（alpha版本 Vapor Mode+Alien Signals） <a class="header-anchor" href="#vueconf2025携手vue3-6来啦-alpha版本-vapor-mode-alien-signals" aria-label="Permalink to &quot;VueConf2025携手vue3.6来啦（alpha版本 Vapor Mode+Alien Signals）&quot;">​</a></h1><h2 id="👉vue3-6-alpha版本" tabindex="-1">👉vue3.6（alpha版本） <a class="header-anchor" href="#👉vue3-6-alpha版本" aria-label="Permalink to &quot;👉vue3.6（alpha版本）&quot;">​</a></h2><p>本次更新带来的最大的两个关键核心更新亮点</p><p>♥ Vapor Mode真实渲染（直接操作真实 DOM，跳过传统虚拟 DOM）</p><p>♥ Alien Signals响应式系统（引入Alien Signals响应式,让vue响应式更新一步）</p><p>官方地址</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v3.6.0-alpha.1 相关文档</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//github.com/vuejs/core/releases/tag/v3.6.0-alpha.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// alien-signals 地址 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//github.com/stackblitz/alien-signals/releases/tag/v1.0.0</span></span></code></pre></div><p>本次VueConf大会于2025 在 7 月 12 日在深圳举行</p><p>值得庆祝的是，这次有幸看到了尤大佬的rap，哈哈</p><p>VueConf 2025 在深圳举行,我觉得这里面最大的就是Vue 3.6.0-alpha.1 版本的Vapor Mode。虽然只是一个测试版本，却是vue历史上又一个重要的里程碑（抛弃虚拟 DOM（Virtual DOM） 的 Vue 模式）</p><p>虚拟 DOM更新的时代从Vue 3.6开始，逐渐成为了历史</p><p>前端进入性能优先时代，百万级数据表的流畅渲染，低端设备的极致兼容，这就是趋势</p><h2 id="👉认识vapor-mode" tabindex="-1">👉认识Vapor Mode <a class="header-anchor" href="#👉认识vapor-mode" aria-label="Permalink to &quot;👉认识Vapor Mode&quot;">​</a></h2><p>Vue 单文件组件（SFC）的一种全新编译模式，最早由尤雨溪于 2022 年提出</p><p>其实就是将优化工作从运行时转移到编译时</p><p>去除虚拟DOM的引擎负担，提升性能</p><h4 id="🍎-核心特性" tabindex="-1">🍎 核心特性 <a class="header-anchor" href="#🍎-核心特性" aria-label="Permalink to &quot;🍎 核心特性&quot;">​</a></h4><ul><li>去除虚拟DOM，编译期直接把模板编译成精准<code>DOM</code>进行操作，无 <code>VNode</code>、无 <code>diff</code>，包体积显著下降、运行更轻巧、更快（跟我之前说的一样，直接编译成原生终是一种极致的趋势）</li><li>自 alien-signals移植全新响应式核心，更新更快</li><li>保留 Vue 风格：仍使用 <code>&lt;template&gt;</code> + <code>&lt;script setup&gt;</code> 组合</li></ul><h4 id="🍎原理" tabindex="-1">🍎原理 <a class="header-anchor" href="#🍎原理" aria-label="Permalink to &quot;🍎原理&quot;">​</a></h4><p>编译时优化：模板在编译阶段生成直接操作DOM的指令，运行时仅需执行预编译的原子操作。</p><p>运行时动态优化：智能检测高频更新场景，自动切换为增量更新策略</p><h4 id="🍎效果" tabindex="-1">🍎效果 <a class="header-anchor" href="#🍎效果" aria-label="Permalink to &quot;🍎效果&quot;">​</a></h4><p>尤大大这么说的<code> 在 100ms 内挂载 10 万个组件 成为了现实</code></p><p>与传统虚拟DOM对比</p><table tabindex="0"><thead><tr><th>指标</th><th>虚拟DOM</th><th>Vapor模式</th></tr></thead><tbody><tr><td>首屏渲染速度</td><td>127ms</td><td>43ms</td></tr><tr><td>内存占用</td><td>48字节/对象</td><td>16字节/对象</td></tr><tr><td>高频更新性能</td><td>1000次/秒</td><td>3000次/秒</td></tr></tbody></table><h4 id="🍎测试性能" tabindex="-1">🍎测试性能 <a class="header-anchor" href="#🍎测试性能" aria-label="Permalink to &quot;🍎测试性能&quot;">​</a></h4><p>在第三方基准测试中与 SolidJS、Svelte 5 旗鼓相当，在大规模组件渲染场景中展现出极佳性能</p><p>下面是官方给出的性能，大型系统正在不断突破瓶颈</p><table tabindex="0"><thead><tr><th style="text-align:left;">场景</th><th style="text-align:left;">传统 VDOM</th><th style="text-align:left;">Vapor Mode</th></tr></thead><tbody><tr><td style="text-align:left;">Hello World 包体积</td><td style="text-align:left;">22.8 kB</td><td style="text-align:left;">7.9 kB ⬇️ 65%</td></tr><tr><td style="text-align:left;">复杂列表 diff</td><td style="text-align:left;">1×</td><td style="text-align:left;">0.6× ⬇️ 40%</td></tr><tr><td style="text-align:left;">内存峰值</td><td style="text-align:left;">100%</td><td style="text-align:left;">58% ⬇️ 42%</td></tr></tbody></table><h2 id="👉使用vapor" tabindex="-1">👉使用Vapor <a class="header-anchor" href="#👉使用vapor" aria-label="Permalink to &quot;👉使用Vapor&quot;">​</a></h2><h4 id="🍎vapor-模式写法" tabindex="-1">🍎Vapor 模式写法 <a class="header-anchor" href="#🍎vapor-模式写法" aria-label="Permalink to &quot;🍎Vapor 模式写法&quot;">​</a></h4><p>写法上变化很小，添加<code>vapor</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vapor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 组件逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="🍎-独立使用" tabindex="-1">🍎 独立使用 <a class="header-anchor" href="#🍎-独立使用" aria-label="Permalink to &quot;🍎 独立使用&quot;">​</a></h4><p>创建纯 Vapor 新应用：完全不引入虚拟 DOM，追求最小体积</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createVaporApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createVaporApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="🍎-混合使用" tabindex="-1">🍎 混合使用 <a class="header-anchor" href="#🍎-混合使用" aria-label="Permalink to &quot;🍎 混合使用&quot;">​</a></h4><p>在传统 Vue 应用中混合使用：在传统虚拟 DOM 应用中安装 <code>vaporInteropPlugin</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createApp, vaporInteropPlugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vaporInteropPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在 Vapor 应用中使用虚拟 DOM 组件的缺陷就是，引入虚拟 DOM 运行时，会导致体积也会增加。</p><h4 id="🍎不支持的功能" tabindex="-1">🍎不支持的功能 <a class="header-anchor" href="#🍎不支持的功能" aria-label="Permalink to &quot;🍎不支持的功能&quot;">​</a></h4><p>不过Vapor 应用也还在补充下面的部分，尚未完全适配</p><p>SSR （尚不适配 Nuxt）</p><ul><li>API 未 100% 对标</li><li>依赖 （Nuxt、<code>&lt;Transition&gt;\`\`&lt;KeepAlive&gt;\`\`&lt;Suspense&gt;</code>） 正在支持的路上</li><li>异步组件</li><li>第三方 <code>VDOM</code> 组件库肯定需要一段时间适配（比如ElementPlus和Antd）</li></ul><h4 id="🍎-项目升级" tabindex="-1">🍎 项目升级 <a class="header-anchor" href="#🍎-项目升级" aria-label="Permalink to &quot;🍎 项目升级&quot;">​</a></h4><p>项目之中使用vapor模式</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vapor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>后续使用等待vue3.6正式发布以后补充项目</p><h2 id="👉alien-signals" tabindex="-1">👉Alien Signals <a class="header-anchor" href="#👉alien-signals" aria-label="Permalink to &quot;👉Alien Signals&quot;">​</a></h2><h4 id="🍎alien-signals介绍" tabindex="-1">🍎Alien Signals介绍 <a class="header-anchor" href="#🍎alien-signals介绍" aria-label="Permalink to &quot;🍎Alien Signals介绍&quot;">​</a></h4><p>Vue 3.6重构响应式核心，引入Alien Signals，让响应式系统再进一步</p><p>Alien Signals架构效果：性能提升60%，内存占用降低40%</p><p><img src="`+t+`" alt="image.png"></p><p>这里引入的是响应式中的更新转播算法模型。这里可以去简单了解一下Signals 信号库包括（Lazy（惰性）和 Eager（即时性））</p><ul><li>Lazy（惰性）：结果被访问时计算，延迟执行，按需的思想，减少冗余计算（Preact Signals 和 Vue大多数框架都是都属于惰性 ）</li><li>Eager（即时性）：数据变化时立即计算，实时响应，但可能会出现频繁计算问题（MobX 属于即时性）</li></ul><h4 id="🍎核心优化" tabindex="-1">🍎核心优化 <a class="header-anchor" href="#🍎核心优化" aria-label="Permalink to &quot;🍎核心优化&quot;">​</a></h4><p>嵌套对象自动代理：无需手动<code>reactive</code>嵌套属性，深度监听成本降低90%。</p><p>增量GC策略：动态回收未使用的依赖追踪，减少内存碎片。</p><p>16字节极简存储：每个响应式对象体积压缩至传统模式的1/3。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { signal } from &#39;vue&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 创建高性能响应式对象</span></span>
<span class="line"><span>const user = signal({</span></span>
<span class="line"><span>  name: &#39;Jack&#39;,</span></span>
<span class="line"><span>  permissions: [&#39;read&#39;, &#39;write&#39;]</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 深度修改自动触发更新</span></span>
<span class="line"><span>user.value.permissions.push(&#39;admin&#39;);</span></span></code></pre></div><h2 id="👉api增强" tabindex="-1">👉API增强 <a class="header-anchor" href="#👉api增强" aria-label="Permalink to &quot;👉API增强&quot;">​</a></h2><p>类型安全与灵活性逐步完善</p><p>Vue 3.6对组合式API进行全方位升级，TypeScript支持飞跃，泛型组件类型推导速度提升4倍，</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5万行项目类型检查</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">8.2</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1.9s</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ts必然趋势</span></span></code></pre></div><p><code>defineComponent</code>类型复杂度降低70%，企业级项目维护成本大幅降低</p><p>useReactive革命</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 自动代理嵌套对象</span></span>
<span class="line"><span>const state = useReactive({</span></span>
<span class="line"><span>  form: { </span></span>
<span class="line"><span>    user: { </span></span>
<span class="line"><span>      profile: { name: &#39;Alice&#39; } </span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>state.form.user.profile.name = &#39;Bob&#39;; // 直接触发更新！</span></span></code></pre></div><hr><h2 id="👉工程化工具优化-rolldown" tabindex="-1">👉工程化工具优化（Rolldown） <a class="header-anchor" href="#👉工程化工具优化-rolldown" aria-label="Permalink to &quot;👉工程化工具优化（Rolldown）&quot;">​</a></h2><p>冷启动速度提升50%，大型项目构建时间从分钟级降至秒级。</p><p>实时热更新延迟&lt;100ms，开发体验丝滑如原生应用。</p><p>Rolldown构建引擎替换Webpack底层，支持ESM优先的Tree Shaking，产物体积减少30%。</p><hr><h2 id="👉未来生态全景" tabindex="-1">👉未来生态全景 <a class="header-anchor" href="#👉未来生态全景" aria-label="Permalink to &quot;👉未来生态全景&quot;">​</a></h2><p>🍎2025必用Vue工具链</p><p>Pinia 3.0：状态管理内存占用降低40%，支持Alien Signals深度集成。</p><p>VueUse 8.0：新增20+组合式API，如<code>useAIRequest</code>实现智能请求重试。</p><p>VaporPress：基于Vapor模式的静态站点生成器，构建速度提升3倍</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//vaporpress.com/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//vaporpress相信不久以后也会跟我们见面</span></span></code></pre></div><p>🍎额外的还有这些</p><p>Rolldown打包</p><p>vite7.0最新更新版</p><p>React类似生态链也在完善</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">React Signals</span></span></code></pre></div>`,84)]))}const u=s(p,[["render",l]]);export{g as __pageData,u as default};
