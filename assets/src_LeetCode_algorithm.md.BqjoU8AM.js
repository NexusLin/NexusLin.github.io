import{_ as a,c as e,o as t,a4 as r}from"./chunks/framework.DvHWMJgD.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/LeetCode/algorithm.md","filePath":"src/LeetCode/algorithm.md"}'),o={name:"src/LeetCode/algorithm.md"},l=r('<p>算法与数据结构</p><h2 id="列举" tabindex="-1">列举 <a class="header-anchor" href="#列举" aria-label="Permalink to &quot;列举&quot;">​</a></h2><h3 id="排序算法" tabindex="-1">排序算法 <a class="header-anchor" href="#排序算法" aria-label="Permalink to &quot;排序算法&quot;">​</a></h3><p>快速排序 冒泡排序 计数排序 归并排序 插入排序 选择排序</p><h3 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-label="Permalink to &quot;动态规划&quot;">​</a></h3><p>背包九讲 计数问题 解题思路 动态规划分类</p><h3 id="搜索算法" tabindex="-1">搜索算法 <a class="header-anchor" href="#搜索算法" aria-label="Permalink to &quot;搜索算法&quot;">​</a></h3><p>回溯算法 递归 剪枝 DFS和 BFS</p><h3 id="图论" tabindex="-1">图论 <a class="header-anchor" href="#图论" aria-label="Permalink to &quot;图论&quot;">​</a></h3><p>最短路径 最小生成树 网络流</p><h3 id="基础技巧" tabindex="-1">基础技巧 <a class="header-anchor" href="#基础技巧" aria-label="Permalink to &quot;基础技巧&quot;">​</a></h3><p>分治思想 贪心思想 二分法 倍增法</p><h3 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h3><h4 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h4><p>字典树 后缀树 KMP AC自动机</p><h4 id="数组-链表" tabindex="-1">数组&amp;链表 <a class="header-anchor" href="#数组-链表" aria-label="Permalink to &quot;数组&amp;链表&quot;">​</a></h4><p>☞ 简单</p><ul><li><a href="/src/LeetCode/leetcode-26-删除有序数组中的重复项.html">26-删除有序数组中的重复项</a>;</li></ul><h4 id="链表-分类" tabindex="-1">链表 =&gt; 分类 <a class="header-anchor" href="#链表-分类" aria-label="Permalink to &quot;链表 =&gt; 分类&quot;">​</a></h4><p>单链表 双链表 循环链表</p><p>链表的9个基本操作</p><h4 id="队列-栈" tabindex="-1">队列，栈 <a class="header-anchor" href="#队列-栈" aria-label="Permalink to &quot;队列，栈&quot;">​</a></h4><p>哈希表</p><h4 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h4><p>大、小根堆 可并堆</p><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h2><h3 id="常用数据结构" tabindex="-1">常用数据结构 <a class="header-anchor" href="#常用数据结构" aria-label="Permalink to &quot;常用数据结构&quot;">​</a></h3><p>数组，字符串 链表 栈 队列</p><ul><li>树</li></ul><blockquote><p>（普通二叉树、平衡二叉树、完全二叉树、二叉搜索树、四叉树（Quadtree）、多叉树（N-ary Tree）） 前序遍历，中序遍历，后续遍历，层次遍历，递归写法和非递归写法，分析各种写法的时间复杂度和空间复杂度。</p></blockquote><h3 id="高级数据结构" tabindex="-1">高级数据结构 <a class="header-anchor" href="#高级数据结构" aria-label="Permalink to &quot;高级数据结构&quot;">​</a></h3><p>图 前缀树 线段树 树状数组 主席树</p><p>解题过程：</p><ul><li><a href="/src/LeetCode/leetcode01两数之和.html">01两数之和</a>;</li><li><a href="/src/LeetCode/leetcode02回文数判断.html">02回文数判断</a>;</li><li><a href="/src/LeetCode/leetcode14-最长公共前缀.html">14-最长公共前缀</a>;</li></ul>',34),h=[l];function i(d,n,c,s,p,u){return t(),e("div",null,h)}const q=a(o,[["render",i]]);export{b as __pageData,q as default};
