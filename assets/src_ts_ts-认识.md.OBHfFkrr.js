import{_ as a,c as t,o as i,ag as n}from"./chunks/framework.CqxIsSM8.js";const e="/ts/ts%E8%AE%A4%E8%AF%8601.png",u=JSON.parse('{"title":"TypeScript认识使用","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/ts/ts-认识.md","filePath":"src/ts/ts-认识.md","lastUpdated":1752135734000}'),p={name:"src/ts/ts-认识.md"};function l(d,s,h,r,o,c){return i(),t("div",null,s[0]||(s[0]=[n('<h1 id="typescript认识使用" tabindex="-1">TypeScript认识使用 <a class="header-anchor" href="#typescript认识使用" aria-label="Permalink to &quot;TypeScript认识使用&quot;">​</a></h1><h2 id="_1、认识typescript" tabindex="-1">1、认识TypeScript <a class="header-anchor" href="#_1、认识typescript" aria-label="Permalink to &quot;1、认识TypeScript&quot;">​</a></h2><h3 id="官方地址❤" tabindex="-1">官方地址❤ <a class="header-anchor" href="#官方地址❤" aria-label="Permalink to &quot;官方地址❤&quot;">​</a></h3><p>英文官网：<a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">https://www.typescriptlang.org/</a></p><p>中文官网：<a href="https://www.tslang.cn/" target="_blank" rel="noreferrer">https://www.tslang.cn/</a></p><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>简单来说： TypeScript是JavaScript进化版，并添加了额外的语法来支持类型</p><p>TypeScript是由微软开发的自由和开源的编程语言。 是JavaScript的一个严格超集，并添加了可选的静态类型和使用看起来像基于类的面向对象编程语法操作Prototype</p><h3 id="包含内容" tabindex="-1">包含内容 <a class="header-anchor" href="#包含内容" aria-label="Permalink to &quot;包含内容&quot;">​</a></h3><ul><li>联合类型</li><li>类型别名</li><li>函数类型(单独指定参数和返回值的类型||同时指定参数和返回值的类型)</li><li>void类型</li><li>函数可选参数</li><li>对象类型</li><li>对象可选属性</li><li>接口</li><li>接口和类型别名的对比</li><li>接口继承</li><li>元组</li><li>类型推论</li><li>类型断言</li></ul><h2 id="_2、为什么使用ts" tabindex="-1">2、为什么使用TS <a class="header-anchor" href="#_2、为什么使用ts" aria-label="Permalink to &quot;2、为什么使用TS&quot;">​</a></h2><h3 id="ts和js的关系" tabindex="-1">Ts和JS的关系 <a class="header-anchor" href="#ts和js的关系" aria-label="Permalink to &quot;Ts和JS的关系&quot;">​</a></h3><blockquote><p>ts包含js</p></blockquote><p><img src="'+e+`" alt="image.png"></p><h3 id="ts命名" tabindex="-1">TS命名 <a class="header-anchor" href="#ts命名" aria-label="Permalink to &quot;TS命名&quot;">​</a></h3><p>• TypeScript 文件的扩展是 .ts ，而不是 JavaScript 文件的 .js 扩展名 TypeScript的优化</p><p>• 将可选类型引入 JavaScript。</p><p>• 在当前 JavaScript 的基础上实现未来 JavaScript 的计划功能，即 ECMAScript Next 或 ES Next。</p><h3 id="ts增加的功能" tabindex="-1">TS增加的功能 <a class="header-anchor" href="#ts增加的功能" aria-label="Permalink to &quot;TS增加的功能&quot;">​</a></h3><ul><li>类型批注和编译时类型检查</li><li>类型推断</li><li>类型擦除</li><li>接口</li><li>枚举</li><li>Mixin</li><li>泛型编程</li><li>名字空间</li><li>元组</li><li>Await</li></ul><p>以下功能是从 ECMA 2015 反向移植而来：</p><ul><li>类</li><li>模块</li><li>lambda 函数的箭头语法</li><li>可选参数以及默认参数</li></ul><h3 id="js类型-和-ts类型" tabindex="-1">JS类型 和 TS类型 <a class="header-anchor" href="#js类型-和-ts类型" aria-label="Permalink to &quot;JS类型 和 TS类型&quot;">​</a></h3><h4 id="js-已有类型" tabindex="-1">JS 已有类型 <a class="header-anchor" href="#js-已有类型" aria-label="Permalink to &quot;JS 已有类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>类型分类</th><th>类型</th></tr></thead><tbody><tr><td>原始类型</td><td>number, string, boolean, null, undefined, symbol</td></tr><tr><td>对象类型</td><td>object (数组、对象、函数等)</td></tr></tbody></table><h4 id="ts新增类型" tabindex="-1">TS新增类型 <a class="header-anchor" href="#ts新增类型" aria-label="Permalink to &quot;TS新增类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>类型分类</th><th>类型</th></tr></thead><tbody><tr><td>联合类型</td><td>可以将多种类型组合为一个类型，例如 \`number</td></tr><tr><td>自定义类型（类型别名）</td><td>使用 <code>type</code> 创建新的类型别名</td></tr><tr><td>接口</td><td><code>interface</code> 用于定义对象的结构</td></tr><tr><td>元组</td><td>tuple 类型，表示一个已知元素数和类型的数组</td></tr><tr><td>字面量类型</td><td>字面量类型，指定值的具体类型（如 <code>&#39;red&#39;</code>）</td></tr><tr><td>枚举</td><td><code>enum</code> 类型，表示一组命名的常数值</td></tr><tr><td>void</td><td>无返回值类型，通常用于函数没有返回值的情况</td></tr><tr><td>any</td><td>任意类型，表示可以是任何类型</td></tr></tbody></table><h4 id="ts-常用基础类型" tabindex="-1">TS 常用基础类型 <a class="header-anchor" href="#ts-常用基础类型" aria-label="Permalink to &quot;TS 常用基础类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>类型分类</th><th>类型</th></tr></thead><tbody><tr><td>布尔值</td><td>boolean</td></tr><tr><td>数字</td><td>number</td></tr><tr><td>字符串</td><td>string</td></tr><tr><td>数组</td><td>Array 类型，例如 <code>number[]</code> 或 <code>Array&lt;number&gt;</code></td></tr><tr><td>元组</td><td>Tuple 类型，例如 <code>[number, string]</code></td></tr><tr><td>枚举</td><td>enum 类型，例如 <code>enum Color { Red, Green, Blue }</code></td></tr><tr><td>Any</td><td>任意类型，表示可以是任何类型</td></tr><tr><td>Void</td><td>无返回值类型，通常用于函数没有返回值的情况</td></tr><tr><td>Null</td><td>null 类型，表示空值</td></tr><tr><td>Undefined</td><td>undefined 类型，表示未定义的值</td></tr><tr><td>Never</td><td>表示从不发生的类型，例如抛出错误的函数</td></tr><tr><td>Object</td><td>对象类型，表示非原始类型的对象</td></tr></tbody></table><h4 id="typescript-原始类型" tabindex="-1">TypeScript 原始类型 <a class="header-anchor" href="#typescript-原始类型" aria-label="Permalink to &quot;TypeScript 原始类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Boolean</td><td>布尔值类型，表示 <code>true</code> 或 <code>false</code></td></tr><tr><td>Number</td><td>数字类型，表示整数或浮动的数字</td></tr><tr><td>String</td><td>字符串类型，表示文本</td></tr><tr><td>Null</td><td>空值类型，表示没有值</td></tr><tr><td>Undefined</td><td>未定义类型，表示变量未赋值</td></tr><tr><td>Symbol</td><td>ES6 新增的符号类型</td></tr></tbody></table><h3 id="ts相比js的优势" tabindex="-1">TS相比JS的优势 <a class="header-anchor" href="#ts相比js的优势" aria-label="Permalink to &quot;TS相比JS的优势&quot;">​</a></h3><p>你可以初步的理解为：</p><p><code>TypeScript为JavaScript添加了类型支持</code></p><ol><li><p>强大的类型系统：TS包含JS，相当于JS+Type（类型系统），在JS的基础上添加了类型系统，代码的可维护性提升，重构代码更容易。</p></li><li><p>TypeScript属于静态类型的编程语言，JS属于动态类型的编程语言。</p></li><li><p>静态类型是编译期做类型检查，动态类型是执行期做类型检查。代码编译和代码执行的顺序本身是1编译2执行.通过使用类型，我们可以在编译时捕获错误，而不是让它们在运行时发生。</p></li><li><p>支持最新的ECMAScript语法，优先体验最新的语法，时刻在前端技术的最前沿。</p></li><li><p>对于JS来说：需要等到代码真正去执行的时候才能发现错误(晚)。</p></li><li><p>对于TS来说：在代码编译的时候(代码执行前)就可以发现措误(早)。</p></li><li><p>TS类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了成本。除此之外，Vue3源码使用TS重写、Angular默认支持TS、React与TS完美配合，TypeScript已成为大中型前端项目的首先编程语言。</p></li><li><p>配合VSCode等开发工具,在程序中任何位置的代码都有代码提示。更早(写代码的同时)发现错误，减少找Bug、改Bug时间，提升开发效率,开发体验更友好</p></li></ol><h3 id="ts案列" tabindex="-1"><strong>TS案列</strong> <a class="header-anchor" href="#ts案列" aria-label="Permalink to &quot;**TS案列**&quot;">​</a></h3><p>JavaScript 相加函数使用：</p><p>如果我们从 HTML 输入元素中获取值并将它们传递给函数，我们可能会得到意想不到的结果</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function add(x, y) {</span></span>
<span class="line"><span>   return x + y;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>let result = add(input1.value, input2.value);</span></span>
<span class="line"><span>console.log(result); // result of concatenating strings</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>let result = add(&#39;10&#39;, 20);</span></span>
<span class="line"><span>console.log(result); // 1020用户输入 10 和 20，则 add()函数将返回 1020，而不是 30</span></span></code></pre></div><p><strong>原因:</strong></p><p>input1.value 和 input2.value 是字符串，而不是数字</p><p>TypeScript 相加函数使用</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function add(x: number, y: number) {</span></span>
<span class="line"><span>	return x + y;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>指定函数的参数类型为数字类型时， 函数 add() 将只接受数字，而不接受任何其他值</p><h2 id="_3、安装配置ts编译器-tsc" tabindex="-1">3、安装配置TS编译器 (tsc) <a class="header-anchor" href="#_3、安装配置ts编译器-tsc" aria-label="Permalink to &quot;3、安装配置TS编译器 (tsc)&quot;">​</a></h2><h3 id="ts编译器" tabindex="-1">ts编译器 <a class="header-anchor" href="#ts编译器" aria-label="Permalink to &quot;ts编译器&quot;">​</a></h3><p>作用：提供代码检查和编译</p><p>ts的代码最终都需要编译成js才能在支持ES3及以上的js引擎中运行</p><p>这就需要安装typescript，然后通过它的 Compiler（编译器） 将 ts 代码编译为 js</p><blockquote><p>浏览器和 Node.js 只能执行 JavaScript 代码，是不支持TypeScript的，所以必须将TypeScript 编译为JavaScript代码</p></blockquote><h5 id="🍓-编译器功能" tabindex="-1">🍓 编译器功能 <a class="header-anchor" href="#🍓-编译器功能" aria-label="Permalink to &quot;🍓 编译器功能&quot;">​</a></h5><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类型检查：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">检查ts代码中类型是否匹配</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(数字赋值给字符串错误)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">代码转译：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">将ts转换为标准的js,移除类型注解等TS特有的语法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">代码优化：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在编译过程中，做一些优化，比如将ES6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">转译成旧版ES5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">生成类型声明：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">生成 .d.ts类型声明文件，帮助其他ts理解代码结构</span></span></code></pre></div><h5 id="🍓-编译器功能-1" tabindex="-1">🍓 编译器功能 <a class="header-anchor" href="#🍓-编译器功能-1" aria-label="Permalink to &quot;🍓 编译器功能&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">语法解析：</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">将TypeScript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">解析为抽象语法树（</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">），并检查语法错误</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类型检查：根据TypeScript类型检查类型一致性，确保符合TypeScript的静态类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">代码生成：生成js，让浏览器或 Node.js执行。</span></span></code></pre></div><h5 id="🍓-编译器命令" tabindex="-1">🍓 编译器命令 <a class="header-anchor" href="#🍓-编译器命令" aria-label="Permalink to &quot;🍓 编译器命令&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 tsc 命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">使用tsc命令编译TypeScript文件为 app.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsc app.ts</span></span></code></pre></div><ol start="2"><li>使用 tsconfig.json 配置文件 项目通常会使用tsconfig.json 配置文件来指定编译选项，控制 TypeScript 编译器的行为，例如输出目录、使用的 JavaScript 版本、启用的编译选项</li></ol><blockquote><p>tsconfig.json 示例：</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commonjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行 tsc 命令时，TypeScript 编译器会自动读取 tsconfig.json 文件来确定如何编译整个项目。</p><h3 id="安装编译ts的工具包" tabindex="-1">安装编译TS的工具包 <a class="header-anchor" href="#安装编译ts的工具包" aria-label="Permalink to &quot;安装编译TS的工具包&quot;">​</a></h3><p>打开Windows下的命令提示符，输入命令</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g typescript </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//安装</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//查看版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//c就是 Compiler的缩写</span></span></code></pre></div><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查版本以后给我们提示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Version </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div><h3 id="编译并运行ts代码" tabindex="-1">编译并运行TS代码 <a class="header-anchor" href="#编译并运行ts代码" aria-label="Permalink to &quot;编译并运行TS代码&quot;">​</a></h3><p>创建一个app.ts文件</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>const hello : string = &quot;Hello World!&quot;</span></span>
<span class="line"><span>console.log(hello)</span></span></code></pre></div><p>执行以下命令将 TypeScript 转换为 JavaScript 代码</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>tsc app.ts //将 TypeScript 转换为 JavaScript 代码</span></span>
<span class="line"><span>node app.js  //输出hello word</span></span></code></pre></div><h3 id="简化运行ts的步骤" tabindex="-1">简化运行TS的步骤 <a class="header-anchor" href="#简化运行ts的步骤" aria-label="Permalink to &quot;简化运行TS的步骤&quot;">​</a></h3><p>使用 ts-node包，直接在Node.js中执行TS代码</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>安装命令</span></span>
<span class="line"><span>npm i -g ts-node </span></span>
<span class="line"><span>使用方式：</span></span>
<span class="line"><span>ts-node ts文件名</span></span></code></pre></div><p>-操作以及输出</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node app.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出Helloworld</span></span></code></pre></div><h2 id="※-报错以及解决" tabindex="-1">※ 报错以及解决 <a class="header-anchor" href="#※-报错以及解决" aria-label="Permalink to &quot;※ 报错以及解决&quot;">​</a></h2><p>👉 报错 SyntaxError: Unexpected token &#39;export&#39;</p><p>👉 解决</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>👉 原因</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于ts（包括 js）而言，任何没有export的文件都被默认为是一个脚本而不是一个模块。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在一个脚本文件中声明的变量等都是在全局作用域的，会在同一个作用域下进行编译。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">当我们声明 name 的时候，如果某个其它的全局文件也声明了个变量 name，会报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">添加上 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} 让当前文件变成一个没有导出任何内容的模块，有了独立的作用域，报错就解决了</span></span></code></pre></div>`,80)]))}const E=a(p,[["render",l]]);export{u as __pageData,E as default};
