import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.CqxIsSM8.js";const l="/xnyh/xnyh-img1.png",g=JSON.parse('{"title":"性能优化-LCP","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/note/performance/性能优化-LCP.md","filePath":"src/note/performance/性能优化-LCP.md","lastUpdated":1745488751000}'),p={name:"src/note/performance/性能优化-LCP.md"};function h(e,s,k,r,E,d){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="性能优化-lcp" tabindex="-1">性能优化-LCP <a class="header-anchor" href="#性能优化-lcp" aria-label="Permalink to &quot;性能优化-LCP&quot;">​</a></h1><h2 id="性能优化-提升-lcp-largest-contentful-paint-最大内容绘制" tabindex="-1">性能优化- 提升 LCP（Largest Contentful Paint 最大内容绘制） <a class="header-anchor" href="#性能优化-提升-lcp-largest-contentful-paint-最大内容绘制" aria-label="Permalink to &quot;性能优化- 提升 LCP（Largest Contentful Paint 最大内容绘制）&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>LCP 就是网页中最大的一部分加载完成的时间（从用户感知页面到基本加载完成的时间,也称为最大内容绘制）</p><p>LCP 是 Core Web Vitals 的三个关键指标之一，Core Web Vitals 是 Google 用于评估网页用户体验的标准之一。为了获得良好的用户体验，Google 建议 LCP 时间在 2.5 秒以内。如果 LCP 超过 4 秒，则需要进行优化</p><p>Google将LCP看做<strong>提高搜索引擎排名的参数之一</strong></p><h3 id="测量方式" tabindex="-1">测量方式 <a class="header-anchor" href="#测量方式" aria-label="Permalink to &quot;测量方式&quot;">​</a></h3><h4 id="lighthouse" tabindex="-1">Lighthouse <a class="header-anchor" href="#lighthouse" aria-label="Permalink to &quot;Lighthouse&quot;">​</a></h4><p>LCP通常在Google浏览器的这个部分可以看到 <img src="'+l+`" alt="image.png"></p><h4 id="代码测量" tabindex="-1">代码测量 <a class="header-anchor" href="#代码测量" aria-label="Permalink to &quot;代码测量&quot;">​</a></h4><p>👉纯html页面</p><p>接下来我们就手写代码手动测量一下网页的LCP部分</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化 LCP 存储</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 PerformanceObserver 来监听 largest-contentful-paint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entries,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;entries&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.entryType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lcp){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            lcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.startTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LCP值为+&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lcp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lcp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lcp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ms&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 观察 largest-contentful-paint 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffered: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>👉在vue2之中使用</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;LCP: {{ lcp }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export default {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      lcp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于存储 LCP 的最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 PerformanceObserver 来观察 LCP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const observer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.entryType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 更新 LCP 值为最大的 LCP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entry.startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.lcp) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.lcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.startTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`LCP: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lcp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 观察 largest-contentful-paint 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    observer.observe({ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="其他方式" tabindex="-1">其他方式 <a class="header-anchor" href="#其他方式" aria-label="Permalink to &quot;其他方式&quot;">​</a></h3><ul><li><strong>Google PageSpeed Insights</strong>：提供对 LCP 的详细分析，并提出优化建议。</li><li><strong>Web Vitals 扩展</strong>：Google Chrome 浏览器的 Web Vitals 扩展可以实时监控 LCP。</li><li><strong>Lighthouse</strong>：Lighthouse 是一个开源工具，用于分析网页性能，包含对 LCP 的评估。</li><li><strong>Web.dev</strong>：这是一个由 Google 提供的在线工具，用于测试网页性能，并生成优化建议。</li></ul><h3 id="触发元素" tabindex="-1">触发元素 <a class="header-anchor" href="#触发元素" aria-label="Permalink to &quot;触发元素&quot;">​</a></h3><p>LCP最常见的容易触发的包含以下部分：</p><ul><li><strong>图像</strong> (<code>&lt;img&gt;</code> 元素)</li><li><strong>图片背景</strong> (<code>&lt;image&gt;</code> 或 CSS <code>background-image</code>)</li><li><strong>块级文本元素</strong>（如 <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code> 等）</li><li><strong>视频海报</strong> (<code>&lt;video&gt;</code> 元素内的 <code>poster</code> 属性)</li></ul><p>这些元素在视口内加载时，浏览器会记录它们的渲染时间，并将其中加载时间最长的元素作为 LCP</p><h3 id="优化-lcp" tabindex="-1">优化 LCP <a class="header-anchor" href="#优化-lcp" aria-label="Permalink to &quot;优化 LCP&quot;">​</a></h3><p>优化LCP也是从上面的元素入手进行优化</p><h4 id="css-和-javascript" tabindex="-1">CSS 和 JavaScript <a class="header-anchor" href="#css-和-javascript" aria-label="Permalink to &quot;CSS 和 JavaScript&quot;">​</a></h4><p>避免使用阻塞渲染的 CSS 和 JavaScript，我们可以将 CSS 放在 <code>&lt;head&gt;</code>，js放入底部同时使用使用 <code>async</code> 和 <code>defer</code> 属性</p><h4 id="简化dom-和-cssom-树" tabindex="-1">简化DOM 和 CSSOM 树 <a class="header-anchor" href="#简化dom-和-cssom-树" aria-label="Permalink to &quot;简化DOM 和 CSSOM 树&quot;">​</a></h4><p>减少不必要的 HTML 和 CSS，避免深层嵌套结构</p><h4 id="利用浏览器缓存" tabindex="-1">利用浏览器缓存 <a class="header-anchor" href="#利用浏览器缓存" aria-label="Permalink to &quot;利用浏览器缓存&quot;">​</a></h4><p>缓存静态资源，如 CSS 和 JavaScript 文件，减少重新加载时间</p><h4 id="优化图片和其他资源" tabindex="-1">优化图片和其他资源 <a class="header-anchor" href="#优化图片和其他资源" aria-label="Permalink to &quot;优化图片和其他资源&quot;">​</a></h4><p>使用现代格式的压缩图片，减少图片大小，使用懒加载技术避免加载不在视口中的图片</p><h2 id="lcp实际使用" tabindex="-1">LCP实际使用 <a class="header-anchor" href="#lcp实际使用" aria-label="Permalink to &quot;LCP实际使用&quot;">​</a></h2><h3 id="静态资源处理" tabindex="-1">静态资源处理 <a class="header-anchor" href="#静态资源处理" aria-label="Permalink to &quot;静态资源处理&quot;">​</a></h3><h3 id="图像和媒体处理" tabindex="-1">图像和媒体处理 <a class="header-anchor" href="#图像和媒体处理" aria-label="Permalink to &quot;图像和媒体处理&quot;">​</a></h3><p>图像通常是影响 LCP 的主要因素，因为它们往往是页面中最大的内容。优化图像可以显著提升 LCP</p><p>👉 图片压缩</p><p>图片压缩模块这里我使用的是熊猫压缩（<a href="https://tinypng.com/" target="_blank" rel="noreferrer">https://tinypng.com/</a>）</p><p>使用现代图像格式（如 WebP 或 AVIF），应用适当的压缩技术，减少图像文件大小。</p><p>👉 <strong>设置正确的图像尺寸</strong></p><p><strong>使用响应式图像 (</strong><code>**srcset**</code>** 和 <strong><code>**sizes**</code></strong> 属性) 根据设备尺寸加载合适的图像**</p><p>👉 <strong>非关键图像懒加载</strong></p><p>使用 <code>loading=&quot;lazy&quot;</code> 属性延迟加载页面中不可见的图像，减少初始页面加载时间。</p><h3 id="服务器响应时间优化" tabindex="-1">服务器响应时间优化 <a class="header-anchor" href="#服务器响应时间优化" aria-label="Permalink to &quot;服务器响应时间优化&quot;">​</a></h3><p>服务器响应时间直接影响 LCP值，服务器需要在页面开始加载之前发送初始 HTML 文档。为了优化服务器响应时间，可以：</p><ul><li><strong>使用CDN (内容分发网络)</strong> ：利用CDN 缓存网站内容，将其分发到用户最近的服务器，减少延迟。</li><li><strong>优化服务器配置</strong>：提高服务器处理请求的性能，使用快速的 Web 服务器（如 Nginx 或 Apache）。</li><li><strong>减少后端处理时间</strong>：优化数据库查询，减少不必要的处理，使用缓存技术（如 Redis 或 Memcached）。</li></ul><h3 id="优先加载关键资源" tabindex="-1">优先加载关键资源 <a class="header-anchor" href="#优先加载关键资源" aria-label="Permalink to &quot;优先加载关键资源&quot;">​</a></h3><p>关键资源（如 CSS 和大块的主要内容）第一步加载，避免阻塞页面的渲染</p><p>👉<strong>延迟加载非关键资源</strong></p><p>将非关键的 JavaScript 和样式表设置为异步加载或延迟加载，以确保关键内容优先加载。</p><p>👉<strong>使用 HTTP/2</strong></p><p>HTTP/2 可以并行加载多个资源，有效减少加载时间。</p><p>👉<strong>内联关键 CSS</strong></p><p>将页面折叠部分（above-the-fold）的关键 CSS 直接内联到 HTML 文档中，以减少首次渲染所需的时间。</p><p>👉<strong>使用 <strong><code>**preload**</code></strong> 指令</strong></p><p>对关键资源（如字体、重要图片）使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 标签预加载让资源快速加载和呈现</p><p>使用 Preload指令 和 Prefetch 预加载关键资源</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h3 id="减少第三方脚本" tabindex="-1">减少第三方脚本 <a class="header-anchor" href="#减少第三方脚本" aria-label="Permalink to &quot;减少第三方脚本&quot;">​</a></h3><p>第三方脚本（如广告、社交媒体小部件、分析工具）会显著拖慢页面加载速度</p><p>👉<strong>异步加载脚本</strong>：使用 <code>async</code> 或 <code>defer</code> 属性，避免脚本阻塞页面渲染</p><p>👉<strong>减少不必要的第三方脚本</strong>：只加载必要的第三方服务，去除不必要的脚本</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue 项目中使用 splitChunks 配置处理import 动态加载组件的方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">减少初始化项目时的 js 资源体积。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 懒加载非初始化必须的组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CopyrightMeta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./components/CopyrightMeta&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类似 element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ui 和 lodash 之类第三方库按需加载</span></span></code></pre></div><h3 id="使用浏览器缓存" tabindex="-1">使用浏览器缓存 <a class="header-anchor" href="#使用浏览器缓存" aria-label="Permalink to &quot;使用浏览器缓存&quot;">​</a></h3><p>利用浏览器缓存可以减少重复请求，提高页面速度</p><p>👉<strong>设置适当的缓存头</strong></p><p>不同静态资源（如图像、CSS 和 JavaScript 文件）具有合适的缓存策略，用户在后续访问时可以直接从缓存中加载资源。</p><p>👉<strong>利用Service Workers (服务工作线程)</strong></p><p><strong>Service Workers</strong>可以在用户的浏览器中缓存资源，减少后续访问时的加载时间。</p><h3 id="优化-css-和字体加载" tabindex="-1">优化 CSS 和字体加载 <a class="header-anchor" href="#优化-css-和字体加载" aria-label="Permalink to &quot;优化 CSS 和字体加载&quot;">​</a></h3><p>👉<strong>最小化和压缩 CSS</strong>：删除不必要的空格、注释和代码，并压缩 CSS 文件，减少文件大小。</p><p>👉<strong>字体显示策略</strong>：使用 <code>font-display</code> 属性来控制自定义字体的加载行为，避免阻塞文本渲染。</p><h4 id="字体显示策略" tabindex="-1">字体显示策略 <a class="header-anchor" href="#字体显示策略" aria-label="Permalink to &quot;字体显示策略&quot;">​</a></h4><p>为了提升视觉效果和品牌一致性，许多网站使用自定义字体。然而，自定义字体的使用也会引发一些性能问题，比如增加网页的加载时间，导致文本闪烁或不可见。这些问题会对用户体验产生负面影响。</p><p>为了更好地控制字体加载行为，CSS 提供了 <code>font-display</code> 属性，它允许开发者指定在字体加载时，浏览器如何处理文本的显示。通过合理使用字体显示策略，可以优化网页的加载体验，确保在字体加载过程中为用户提供最佳的视觉体验。</p><h4 id="font-display-的值" tabindex="-1">font-display 的值 <a class="header-anchor" href="#font-display-的值" aria-label="Permalink to &quot;font-display 的值&quot;">​</a></h4><p><code>font-display</code> 属性有多个可能的值，每个值代表一种不同的字体显示策略：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// font-display:&#39;auto&#39;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">浏览器将根据字体的加载情况决定显示方式。通常遵循浏览器的默认行为</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// font-display:&#39;block&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在字体加载完成之前，文本不可见</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">字体加载完成后，文本会立即显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这种方式会造成内容的“闪烁”（</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FOIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，Flash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Invisible Text）。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// font-display:&#39;swap&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在字体加载完成之前，使用系统字体或备用字体展示文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">字体加载完成后，立即切换为目标字体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这种方式通常用于避免文本的闪烁，提升用户体验。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// font-display:&#39;fallback&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在字体加载完成之前，使用系统字体或备用字体展示文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果字体加载时间超过一定的延迟（通常是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 秒），则继续使用备用字体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">直到页面关闭或刷新。能减少字体加载时间对页面表现的影响</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// font-display:&#39;optional&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在字体加载完成之前，使用系统字体或备用字体展示文本。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果字体加载的延迟很高，甚至浏览器可能放弃加载目标字体，直接使用备用字体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用于优化页面性能和响应速度。</span></span></code></pre></div><h4 id="使用-font-display-策略" tabindex="-1">使用 font-display 策略 <a class="header-anchor" href="#使用-font-display-策略" aria-label="Permalink to &quot;使用 font-display 策略&quot;">​</a></h4><ul><li><strong>快速显示文本</strong>：如果优先考虑页面内容的快速展示，可以使用 <code>swap</code> 或 <code>optional</code>，确保在字体加载过程中文本总是可见。</li><li><strong>确保一致的视觉效果</strong>：如果视觉一致性和自定义字体的使用是优先考虑的，可以选择 <code>block</code> 或 <code>fallback</code>，在字体加载后呈现自定义字体。</li><li><strong>性能优先</strong>：在移动端或性能敏感的应用中，使用 <code>optional</code> 可以减少字体加载对性能的影响。</li></ul><p>针对 LCP 指标具体来说就是使用 <code>font-display: swap;</code> 使浏览器在加载字体的同时立即使用后备字体呈现文本。当自定义字体加载完成后，后备字体将被替换为自定义字体，这种策略被称为“闪烁的无样式文本”（Flash of Unstyled Text, FOUT）</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@font-face {</span></span>
<span class="line"><span>  font-family: &#39;IconFont&#39;;</span></span>
<span class="line"><span>  src: url(&#39;iconfont.woff2&#39;) format(&#39;woff2&#39;);</span></span>
<span class="line"><span>  font-display: swap;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>优点</strong>: 文本始终可见，避免了空白文本的问题，提高了可读性。<br><strong>缺点</strong>: 字体切换可能导致短暂的视觉不一致。</p>`,82)]))}const c=i(p,[["render",h]]);export{g as __pageData,c as default};
