import{_ as a,c as e,ag as t,o as s}from"./chunks/framework.wRLzwZz-.js";const d=JSON.parse('{"title":"❤报错处理","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/Vue/Vue3-报错处理.md","filePath":"src/Vue/Vue3-报错处理.md"}'),n={name:"src/Vue/Vue3-报错处理.md"};function i(l,r,o,p,c,h){return s(),e("div",null,r[0]||(r[0]=[t(`<h1 id="❤报错处理" tabindex="-1">❤报错处理 <a class="header-anchor" href="#❤报错处理" aria-label="Permalink to &quot;❤报错处理&quot;">​</a></h1><h2 id="error-the-array-literal-notation-is-preferable-typescript-eslint-no-array-constructor" tabindex="-1">error The array literal notation [] is preferable @typescript-eslint/no-array-constructor <a class="header-anchor" href="#error-the-array-literal-notation-is-preferable-typescript-eslint-no-array-constructor" aria-label="Permalink to &quot;error The array literal notation [] is preferable  @typescript-eslint/no-array-constructor&quot;">​</a></h2><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改为</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span></code></pre></div><p>let arr = new Array(); 和 let arr = []; 都是创建空数组的写法，但它们之间有一些细微的区别，尤其是在可读性、性能以及潜在的错误行为上。接下来，我会详细分析这两种写法的区别、各自的优势，以及更推荐的写法。</p><ol><li>let arr = new Array(); 这种写法使用了构造函数 Array 来创建一个空数组。Array 构造函数没有传入参数时，它会返回一个空数组。它的行为相对直观且语法简单，但存在一些潜在的坑和不如字面量语法直观的问题。</li></ol><p>特点： 创建空数组：new Array() 创建一个空数组，arr.length 为 0。 潜在的隐式行为：如果传递一个参数给 new Array()（例如 new Array(5)），它会创建一个具有 5 个 &quot;空位&quot;（而不是值为 undefined 的元素）的数组。这个行为可能不太直观。 示例： javascript let arr = new Array(); console.log(arr); // [] console.log(arr.length); // 0</p><p>// 如果传入参数 let arr2 = new Array(5); console.log(arr2); // [ &lt;5 empty items&gt; ] console.log(arr2.length); // 5 如上所示，new Array(5) 创建的是一个长度为 5 的数组，但它的元素是“空位”，并不是真正的 undefined，这可能会导致一些意外行为（例如，map 和 forEach 方法不会遍历这些“空位”）。</p><ol start="2"><li>let arr = []; 这种写法使用了数组字面量语法来创建空数组。数组字面量是 JavaScript 中最常用和最简洁的创建数组的方法。</li></ol><p>特点： 直接创建空数组：[] 创建一个空数组，行为非常直观和简洁。 没有潜在的隐式行为：数组字面量总是创建一个空数组，不会因为传入参数而导致意外行为。 更加简洁、可读性高：由于数组字面量语法简洁明了，因此它比 new Array() 更容易理解，代码也更具可读性。 示例： javascript let arr = []; console.log(arr); // [] console.log(arr.length); // 0 3. 区别与优势 可读性： let arr = []：是最直观且简洁的写法。无论你是初学者还是有经验的开发者，都会很容易理解这行代码的意图。 let arr = new Array();：虽然创建空数组的效果和 [] 一样，但使用 new Array() 可能不太直观，特别是对于不熟悉 JavaScript 的人来说。更重要的是，如果无意中传递了参数（如 new Array(5)），可能会导致一些非预期的行为。 性能： 在绝大多数情况下，let arr = [] 会稍微更高效一些，因为它是直接通过字面量创建数组，避免了 new Array() 的构造函数调用。 不过，这种性能差异通常是微乎其微的，除非你在性能非常关键的部分做了大量数组创建，否则几乎感受不到差异。</p><p>潜在错误： new Array()：如果传入了一个数字参数（如 new Array(5)），它会创建一个具有 5 个空位的数组，而这些空位不会被认为是 undefined，也不会被 forEach、map 等方法遍历，可能导致难以发现的 bug。</p><p>javascript let arr = new Array(3); arr.forEach(item =&gt; console.log(item)); // 不会打印任何东西，因为数组是空位 []：数组字面量没有这种问题，它总是创建一个空的数组。</p><ol start="4"><li>推荐使用哪种写法 推荐使用 let arr = [];，因为它更简洁、清晰，没有潜在的行为差异，并且是最常见的做法。它提供了更好的可读性和一致性，避免了 new Array() 可能引发的陷阱。</li></ol><p>总结： let arr = [] 是最推荐的写法，它简洁、直观，没有潜在的错误和特殊行为。 let arr = new Array(); 在创建空数组时是可行的，但由于它的构造函数的特殊性和潜在问题（例如 new Array(5)），不如字面量形式推荐。 因此，在创建空数组时，始终使用 [] 作为首选。</p>`,13)]))}const k=a(n,[["render",i]]);export{d as __pageData,k as default};
