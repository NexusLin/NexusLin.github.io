import{_ as s,c as n,o as e,ag as p}from"./chunks/framework.DnwzncJk.js";const i="/react/reactcraco1.png",t="/react/reactcraco2.png",l="/react/reactreactcraco3.png",c="/react/reactreactcraco4.png",o="/react/reactreactcraco5.png",r="/react/reactreactcraco6.png",h="/react/reactcraco7.png",m=JSON.parse('{"title":"❤React-craco配置","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/react/react-craco配置.md","filePath":"src/react/react-craco配置.md","lastUpdated":1743124685000}'),d={name:"src/react/react-craco配置.md"};function k(g,a,u,E,b,v){return e(),n("div",null,a[0]||(a[0]=[p(`<h1 id="❤react-craco配置" tabindex="-1">❤React-craco配置 <a class="header-anchor" href="#❤react-craco配置" aria-label="Permalink to &quot;❤React-craco配置&quot;">​</a></h1><h2 id="_1、配置craco" tabindex="-1">1、配置craco <a class="header-anchor" href="#_1、配置craco" aria-label="Permalink to &quot;1、配置craco&quot;">​</a></h2><h3 id="_1-认识craco" tabindex="-1">（1）认识craco <a class="header-anchor" href="#_1-认识craco" aria-label="Permalink to &quot;（1）认识craco&quot;">​</a></h3><p>在 React 官方搭建的项目中，你可以通过修改 webpack 配置文件来配置路径别名。通常，官方搭建的项目使用的是 Create React App（CRA），它默认隐藏了 webpack 的配置，但是你可以使用 <code>craco</code> 或 <code>react-app-rewired</code> 这样的工具来修改 webpack 配置</p><p>这里我们使用的是 <code>craco</code></p><p>craco可以帮助我们可以自己配置启动的webpack，或者一些环境变量等等，允许我们在不 eject 的情况下，对 Create React App 默认配置进行灵活的定制和覆盖</p><h3 id="_2-安装craco" tabindex="-1">（2）安装craco <a class="header-anchor" href="#_2-安装craco" aria-label="Permalink to &quot;（2）安装craco&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yarn add @craco/craco --save</span></span></code></pre></div><p>官方修改webpack需要暴露出来webpack配置,给项目配置webpack内容。必须在package.json中</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm run eject</span></span></code></pre></div><p>下载完成后，我们需要在启动环境中替换为craco</p><h3 id="_3-在package-json之中配置craco" tabindex="-1">（3）在package.json之中配置craco <a class="header-anchor" href="#_3-在package-json之中配置craco" aria-label="Permalink to &quot;（3）在package.json之中配置craco&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>   &quot;start&quot;: &quot;craco start&quot;,</span></span>
<span class="line"><span>   &quot;build&quot;: &quot;craco build&quot;,</span></span>
<span class="line"><span>   &quot;test&quot;: &quot;craco test&quot;,</span></span>
<span class="line"><span>   &quot;eject&quot;: &quot;craco eject&quot;</span></span>
<span class="line"><span>},</span></span></code></pre></div><h3 id="_4-在项目根目录下面创建craco-config-js" tabindex="-1">（4）在项目根目录下面创建<code>craco.config.js</code> <a class="header-anchor" href="#_4-在项目根目录下面创建craco-config-js" aria-label="Permalink to &quot;（4）在项目根目录下面创建\`craco.config.js\`&quot;">​</a></h3><p>文件名字不能写错。默认采用craco来加载项目，读取这个文件。</p><p>可以在这个文件中配置webpack相关的内容</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>// craco.config.js</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>    webpack: {</span></span>
<span class="line"><span>      configure: (webpackConfig) =&gt; {</span></span>
<span class="line"><span>        const alias = {</span></span>
<span class="line"><span>          // 添加你的路径别名配置</span></span>
<span class="line"><span>          &#39;@&#39;: path.resolve(__dirname, &#39;src&#39;),</span></span>
<span class="line"><span>          &#39;@components&#39;: path.resolve(__dirname, &#39;src/components&#39;),</span></span>
<span class="line"><span>          &#39;@utils&#39;: path.resolve(__dirname, &#39;src/utils&#39;),</span></span>
<span class="line"><span>          // 更多的别名配置...</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>        // 将别名配置合并到 webpack 配置中</span></span>
<span class="line"><span>        webpackConfig.resolve.alias = { ...webpackConfig.resolve.alias, ...alias };</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>        return webpackConfig;</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  };</span></span></code></pre></div><p>现在我们试试配置的别名的使用</p><p>在项目中使用路径别名来导入模块</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import RegisterPage from &#39;@/pages/register.js&#39;</span></span></code></pre></div><p>结果我们发现控制台报错：</p><p>报错日志如下图：<code>path is not defined</code></p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path is not defined</span></span></code></pre></div><p>导入补充完善path这个模块</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const path = require(&quot;path&quot;);</span></span></code></pre></div><p>ok 项目启动正常!</p><h2 id="_2、路径别名配置" tabindex="-1">2、<strong>路径别名配置</strong> @ <a class="header-anchor" href="#_2、路径别名配置" aria-label="Permalink to &quot;2、**路径别名配置** @&quot;">​</a></h2><p>但是这个时候我们发现<code>@</code>却无法提示，补充完善一下，这个时候我们的提示就可以正常显示出来</p><p><img src="`+i+`" alt="image.png" loading="lazy"></p><p>根目录下新建jsconfig.json 文件进行配置</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span>    &quot;emitDecoratorMetadata&quot;: true,</span></span>
<span class="line"><span>    &quot;experimentalDecorators&quot;: true,</span></span>
<span class="line"><span>    &quot;baseUrl&quot;: &quot;.&quot;,</span></span>
<span class="line"><span>    &quot;paths&quot;: {</span></span>
<span class="line"><span>      &quot;@/*&quot;: [&quot;./src/*&quot;]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="`+t+`" alt="image.png" loading="lazy"></p><p>CRA版本可以配置craco.config.js</p><p>craco.config.js</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const alias = {</span></span>
<span class="line"><span>          // 添加你的路径别名配置</span></span>
<span class="line"><span>          &#39;@&#39;:path.resolve(__dirname, &#39;src/&#39;),</span></span>
<span class="line"><span>          &#39;@components&#39;: path.resolve(__dirname, &#39;src/components&#39;),</span></span>
<span class="line"><span>          &#39;@utils&#39;: path.resolve(__dirname, &#39;src/utils&#39;),</span></span>
<span class="line"><span>          // 更多的别名配置...</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>// 将别名配置合并到 webpack 配置中</span></span>
<span class="line"><span>webpackConfig.resolve.alias = { ...webpackConfig.resolve.alias, ...alias };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>return webpackConfig;</span></span></code></pre></div><h2 id="_3、配置打包预览配置" tabindex="-1">3、配置打包预览配置 <a class="header-anchor" href="#_3、配置打包预览配置" aria-label="Permalink to &quot;3、配置打包预览配置&quot;">​</a></h2><p>打开项目<code>yarn build </code>打包以后，项目多了一个build文件夹</p><p><img src="`+l+'" alt="image.png" loading="lazy"></p><p>打开预览一下，发现都是报错，提示我们文件的地址找不到 <img src="'+c+'" alt="image.png" loading="lazy"></p><p>这个时候我们可以配置一下我们的package.json文件</p><p>package.json文件配置如下：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;homepage&quot;: &quot;./&quot;,</span></span></code></pre></div><p>再次打开，配置显示正常！ <img src="'+o+`" alt="image.png" loading="lazy"></p><h2 id="_4、配置环境变量" tabindex="-1">4、配置环境变量 <a class="header-anchor" href="#_4、配置环境变量" aria-label="Permalink to &quot;4、配置环境变量&quot;">​</a></h2><h3 id="_1-react内置环境" tabindex="-1">（1）react内置环境 <a class="header-anchor" href="#_1-react内置环境" aria-label="Permalink to &quot;（1）react内置环境&quot;">​</a></h3><p>先来了解一下什么是React给我们提供的环境变量</p><p><code>create-react-app</code> 创建的项目有内置的环境变量 <code>NODE_ENV</code>，可通过 <code>process.env.NODE_ENV</code> 读取它。</p><p><code>NODE_ENV</code> 默认有三个可能的值，分别是 <code>development</code>, <code>test</code> 和 <code>production</code>, 对应开发，测试，生产环境。</p><p>运行 <code>yarn start</code>, <code>NODE_ENV</code> 的值为 <code>development</code>;</p><p><code>yarn test</code> 则是 <code>test</code>;</p><p><code>yarn build</code> 则对应 <code>prodution</code></p><p>所以我们就可以为不同的环境配置不同的环境变量</p><p>连接的后台接口变量是这样子的：</p><p>&#39;<a href="https://link.juejin.cn?target=http%3A%2F%2F%25E6%258E%25A5%25E5%258F%25A3%25E7%259A%2584%25E5%25BC%2580%25E5%258F%2591%25E7%258E%25AF%25E5%25A2%2583ip%3A%25E7%25AB%25AF%25E5%258F%25A3" target="_blank" rel="noreferrer">http://接口的开发环境ip:端口</a>&#39;</p><h4 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h4><p><code>配置的名字必须是</code>REACT_APP_xxx<code>这种形式和开头才可以</code></p><p>原因： react 只读取 REACT_APP 开头的变量，其他的不认识，会被 React 忽略</p><h3 id="_2-创建-env-development-开发环境-文件" tabindex="-1">（2）创建<code>.env.development</code>（开发环境）文件 <a class="header-anchor" href="#_2-创建-env-development-开发环境-文件" aria-label="Permalink to &quot;（2）创建\`.env.development\`（开发环境）文件&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 开发环境</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REACT_APP_TITLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开发环境&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REACT_APP_BASE_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8888&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_3-创建-env-production-生产环境-文件" tabindex="-1">（3）创建<code>.env.production</code>（生产环境）文件 <a class="header-anchor" href="#_3-创建-env-production-生产环境-文件" aria-label="Permalink to &quot;（3）创建\`.env.production\`（生产环境）文件&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 生产环境</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REACT_APP_TITLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;生产环境&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REACT_APP_BASE_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8888&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>然后我们检测一下自己的配置的环境变量有没有生效，其实这里只需要简单打印就可以看到。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;环境变量&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_4-安装使用-cross-env-配置打包开发环境和测试环境" tabindex="-1">（4） 安装使用 <code>cross-env</code> 配置打包开发环境和测试环境 <a class="header-anchor" href="#_4-安装使用-cross-env-配置打包开发环境和测试环境" aria-label="Permalink to &quot;（4） 安装使用 \`cross-env\` 配置打包开发环境和测试环境&quot;">​</a></h3><p><strong>package.json 中配置脚本</strong>：在 <code>package.json</code> 文件中，使用 <code>cross-env</code> 设置不同的环境变量</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add cross</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><p>配置package.json中打包命令</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;craco build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cross-env ENV=development craco start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;build:dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cross-env ENV=development craco build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于开发环境</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;build:prod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cross-env ENV=production craco build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于生产环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><h3 id="_6-查看" tabindex="-1">（6）查看 <a class="header-anchor" href="#_6-查看" aria-label="Permalink to &quot;（6）查看&quot;">​</a></h3><blockquote><p>本地启动，可以发现我们的开发环境变量已经正常了 <img src="`+r+'" alt="image.png" loading="lazy"></p></blockquote><blockquote><p>打包以后查看这个时候，我们的生产环境变量也正常了</p></blockquote><p><img src="'+h+'" alt="image.png" loading="lazy"></p>',72)]))}const y=s(d,[["render",k]]);export{m as __pageData,y as default};
