import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.CqxIsSM8.js";const n="/images/node8-1.png",p="/images/node8-2.png",g=JSON.parse('{"title":"❤Express-jwt身份认证","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/node/express/Node-Express-jwt身份认证.md","filePath":"src/node/express/Node-Express-jwt身份认证.md","lastUpdated":1748496767000}'),l={name:"src/node/express/Node-Express-jwt身份认证.md"};function h(r,s,k,o,d,E){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="❤express-jwt身份认证" tabindex="-1">❤Express-jwt身份认证 <a class="header-anchor" href="#❤express-jwt身份认证" aria-label="Permalink to &quot;❤Express-jwt身份认证&quot;">​</a></h1><h2 id="_1、token基本概念" tabindex="-1">1、token基本概念 <a class="header-anchor" href="#_1、token基本概念" aria-label="Permalink to &quot;1、token基本概念&quot;">​</a></h2><h3 id="session认证的局限性" tabindex="-1">Session认证的局限性 <a class="header-anchor" href="#session认证的局限性" aria-label="Permalink to &quot;Session认证的局限性&quot;">​</a></h3><p>Session 认证机制需要配合<strong>Cookie</strong>才能实现。由于 Cookie 默认<strong>不支持跨域</strong>访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证。</p><p>注意：</p><ul><li>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制。</li><li>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制。</li></ul><h3 id="什么是token" tabindex="-1">什么是token <a class="header-anchor" href="#什么是token" aria-label="Permalink to &quot;什么是token&quot;">​</a></h3><p><code>JWT</code>（英文全称：JSON Web Token）是目前最流行的跨域认证解决方案。</p><h3 id="jwt的原理" tabindex="-1">jwt的原理 <a class="header-anchor" href="#jwt的原理" aria-label="Permalink to &quot;jwt的原理&quot;">​</a></h3><p><img src="'+n+`" alt="image.png"></p><p><strong>总结</strong>：</p><ol><li>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。</li><li>服务器通过还原 Token 字符串的形式来认证用户的身份。</li></ol><h3 id="jwt的组成" tabindex="-1">jwt的组成 <a class="header-anchor" href="#jwt的组成" aria-label="Permalink to &quot;jwt的组成&quot;">​</a></h3><p>JWT 通常由三部分组成，分别是 <code>Header</code><strong>（头部）、</strong><code>Payload</code><strong>（有效荷载）、</strong><code>Signature</code><strong>（签名）</strong> 。</p><p>三者之间使用英文的“.”分隔，格式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Header.Payload.Signature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列如</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Im5hbWUiOiJ6cyIsInBhc3N3b3JkIjoxMjN9LCJpYXQiOjE2Mzc1MDcyNzksImV4cCI6MTYzNzUxODA3OX0.0o9PCv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">11SxM8TgMns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S0D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ZnidYZdXLk13V_B35B0</span></span></code></pre></div><h3 id="jwt的三个部分各自代表的含义" tabindex="-1">JWT的三个部分各自代表的含义 <a class="header-anchor" href="#jwt的三个部分各自代表的含义" aria-label="Permalink to &quot;JWT的三个部分各自代表的含义&quot;">​</a></h3><p>JWT 的三个组成部分，从前到后分别是 Header、Payload、Signature。</p><p>其中：</p><ul><li><strong>payload</strong> 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。</li><li><strong>Header</strong> 和 <strong>Signature</strong> 是安全性相关的部分，只是为了保证 Token 的安全性。</li></ul><p><img src="`+p+`" alt="image.png"></p><h3 id="jwt的使用方式" tabindex="-1">jwt的使用方式 <a class="header-anchor" href="#jwt的使用方式" aria-label="Permalink to &quot;jwt的使用方式&quot;">​</a></h3><blockquote><p>前端</p></blockquote><ol><li>客户端收到服务器返回的 JWT 之后，通常会将它储存在<strong>localStorage</strong> 或<strong>sessionStorage</strong> 中。</li><li>此后，客户端每次与服务器通信，都要带上这个 JWT 的字符串，从而进行身份认证。推荐的做法是<strong>把 JWT 放在 HTTP 请求头的 <strong><code>Authorization</code></strong> 字段中</strong>，格式如下：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Authorization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Bearer [token]</span></span></code></pre></div><blockquote><p>后端</p></blockquote><ol><li>登录成功, 生成token, 返回给浏览器</li><li>所有的接口中. 判断请求头是否携带了token(登录页面除外)</li></ol><h2 id="_2、使用jwt" tabindex="-1">2、使用jwt <a class="header-anchor" href="#_2、使用jwt" aria-label="Permalink to &quot;2、使用jwt&quot;">​</a></h2><h3 id="express-jwt介绍和认识-后面可能会抽离为单个模块" tabindex="-1">express-jwt介绍和认识（后面可能会抽离为单个模块） <a class="header-anchor" href="#express-jwt介绍和认识-后面可能会抽离为单个模块" aria-label="Permalink to &quot;express-jwt介绍和认识（后面可能会抽离为单个模块）&quot;">​</a></h3><p>express-jwt的官网</p><p><a href="https://www.tabnine.com/code/javascript/functions/express-jwt/expressJwt" target="_blank" rel="noreferrer">https://www.tabnine.com/code/javascript/functions/express-jwt/expressJwt</a></p><h3 id="_1、简述" tabindex="-1">1、简述 <a class="header-anchor" href="#_1、简述" aria-label="Permalink to &quot;1、简述&quot;">​</a></h3><p>JWT ，全称JSON Web Token，本质就是一个字符串，它是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token，并且这个JWT token带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为Json对象传输。</p><p>个人理解：其实本质上就是添加了一个安全性的签名然后用这个签名来校验是不是安全的。</p><p><code>express-jwt是express的中间件，用来解析请求对象的JWT负载。</code></p><h3 id="_2、简单用法" tabindex="-1">2、简单用法 <a class="header-anchor" href="#_2、简单用法" aria-label="Permalink to &quot;2、简单用法&quot;">​</a></h3><p>使用HS256加密的JWT:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expressjwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: jwt } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express-jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;/protected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  jwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ secret: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, algorithms: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.auth.admin) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_3、express-jwt参数详解" tabindex="-1">3、express-jwt参数详解 <a class="header-anchor" href="#_3、express-jwt参数详解" aria-label="Permalink to &quot;3、express-jwt参数详解&quot;">​</a></h3><p>expressjwt的参数列表如下：</p><blockquote><p>secret：必须的参数，为字符串string类型 或者 GetVerificationKey函数接口</p><p>GetVerificationKey = (req: express.Request, token: jwt.Jwt | undefined) =&gt; Promise&lt;jwt.Secret&gt;;</p><p>getToken?：可选的参数，TokenGetter接收快速请求并返回令牌的函数，默认情况下它在Authorization头中查找。</p><p>isRevoked?：可选的参数，一个验证令牌是否被撤销的函数，函数接口如下：</p></blockquote><blockquote><p>IsRevoked = (req: express.Request, token: jwt.Jwt | undefined) =&gt; Promise; credentialsRequired?：可选的参数，类型为bool，当为false时，如果请求不包含令牌，则继续到下一个中间件，而不是失败，默认为true。 requestProperty?：可选的参数，类型为string，请求对象中设置有效负载的属性的名称。</p></blockquote><h3 id="_4、安全漏洞" tabindex="-1">4、安全漏洞 <a class="header-anchor" href="#_4、安全漏洞" aria-label="Permalink to &quot;4、安全漏洞&quot;">​</a></h3><p>当提供第三方库作为机密时，需要使用算法参数来防止潜在的降级攻击。<br> 不要混合使用对称算法和非对称算法(如HS256/RS256):在没有进一步验证的情况下混合使用算法可能会潜在地导致降级漏洞。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  secret: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shhhhhhared-secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  algorithms: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //algorithms: [&#39;RS256&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_3、格外注意" tabindex="-1">3、格外注意 <a class="header-anchor" href="#_3、格外注意" aria-label="Permalink to &quot;3、格外注意&quot;">​</a></h2><p>☞ 重点</p><p>使用静态资源目录一定要在expressJWT之前，否则会报错或者根本访问不到静态资源目录</p><p>确保 /uploads 的静态资源映射在 expressJWT 之前：</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/uploads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uploads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre></div>`,50)]))}const u=i(l,[["render",h]]);export{g as __pageData,u as default};
