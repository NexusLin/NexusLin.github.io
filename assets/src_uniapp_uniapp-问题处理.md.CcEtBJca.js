import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.DnwzncJk.js";const c=JSON.parse('{"title":"uniapp-报错和处理","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/uniapp/uniapp-问题处理.md","filePath":"src/uniapp/uniapp-问题处理.md","lastUpdated":1743418529000}'),n={name:"src/uniapp/uniapp-问题处理.md"};function l(h,i,p,r,d,k){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="uniapp-报错和处理" tabindex="-1">uniapp-报错和处理 <a class="header-anchor" href="#uniapp-报错和处理" aria-label="Permalink to &quot;uniapp-报错和处理&quot;">​</a></h1><p>🍓 主要记录一些开发过程中遇到的问题以及处理的方式和方法</p><blockquote><p>就是整个uniapp文章系列文章过程之中遇到的一些问题和优化以及处理方式</p></blockquote><h2 id="格式化代码" tabindex="-1">格式化代码 <a class="header-anchor" href="#格式化代码" aria-label="Permalink to &quot;格式化代码&quot;">​</a></h2><p>使用uniapp时我用快捷键格式化代码时，提示我无法格式化代码</p><p>存在的问题：我们node的地址没有匹配完全</p><p>在这里先把我们本地的node的运行地址给填写上，如果不熟悉的话，可以cmd之中输入<code>where node</code>进行查询自己的地址，然后填写上就可以了。</p><h2 id="报错-api-scope-is-not-declared-in-the-privacy-agreement" tabindex="-1">报错（api scope is not declared in the privacy agreement） <a class="header-anchor" href="#报错-api-scope-is-not-declared-in-the-privacy-agreement" aria-label="Permalink to &quot;报错（api scope is not declared in the privacy agreement）&quot;">​</a></h2><h3 id="必须先查看协议" tabindex="-1">必须先查看协议 <a class="header-anchor" href="#必须先查看协议" aria-label="Permalink to &quot;必须先查看协议&quot;">​</a></h3><p>调用wx.getUserProfile进行授权时，返回错误信息：{errMsg: “getUserProfile:fail api scope is not declared in the privacy agreement”, errno: 112} 是因为微信小程序登录，增加了用户是否查看隐私协议的验证，不跳转到隐私协议，就不让用户登录。</p><h2 id="unhandled-promise-rejection" tabindex="-1">Unhandled promise rejection <a class="header-anchor" href="#unhandled-promise-rejection" aria-label="Permalink to &quot;Unhandled promise rejection&quot;">​</a></h2><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">创建小程序后报错 Unhandled promise rejection {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: “</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webapi_getwxaasyncsecinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:fail“}</span></span></code></pre></div><h4 id="原因-没写catch" tabindex="-1">原因：没写catch() <a class="header-anchor" href="#原因-没写catch" aria-label="Permalink to &quot;原因：没写catch()&quot;">​</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580835133-9c096cc0-82cb-4cda-bfcf-a6a886067045.webp" alt="" loading="lazy"></p><h4 id="解决方法" tabindex="-1">解决方法： <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法：&quot;">​</a></h4><p>这种情况下会在控制台中看到 &quot;Unhandled promise rejection&quot; 错误, 可以用以下来捕获错误</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> promise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Uncaught Error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error.message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="unhandled-promise-rejection-ty" tabindex="-1">**unhandled promise rejection ty ** <a class="header-anchor" href="#unhandled-promise-rejection-ty" aria-label="Permalink to &quot;**unhandled promise rejection ty **&quot;">​</a></h2><p>这里这句 <code>unhandled promise rejection ty </code> 的意思是未处理的 Promise 拒绝。这通常是因为 Promise 对象被拒绝了，但没有被 catch 或者处理。在 JavaScript 中，Promise 对象可以表示异步操作的结果，如果 Promise 对象被拒绝了，就需要通过 catch 或者处理函数来处理这个错误。如果没有处理，就会出现 unhandled promise rejection ty 的错误提示。</p><h2 id="提示v-html-will-override-element-children" tabindex="-1">提示v-html will override element children. <a class="header-anchor" href="#提示v-html-will-override-element-children" aria-label="Permalink to &quot;提示v-html will override element children.&quot;">​</a></h2><p>在 Vue.js 中，<code>v-html</code> 指令用于将 HTML 字符串渲染为 HTML 元素的内容。然而，当使用 <code>v-html</code> 指令时，它会覆盖元素的所有子元素，包括那些使用其他 Vue 指令的元素。因此，如果你在 <code>v-html</code> 指令中使用了其他 Vue 指令，就会出现 &quot;v-html will override element children&quot; 的警告。</p><p>要解决这个问题，你可以将 <code>v-html</code> 指令和需要保留的子元素放在同一个元素中，并使用 Vue 的 <code>v-if</code> 指令来控制 <code>v-html</code> 指令的渲染。例如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!useHtmlContent&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;originalContent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ originalContent }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 或者使用其他方式显示原始内容 --&gt;</span></span></code></pre></div><h2 id="view页面中的文本乱码问题" tabindex="-1">view页面中的文本乱码问题 <a class="header-anchor" href="#view页面中的文本乱码问题" aria-label="Permalink to &quot;view页面中的文本乱码问题&quot;">​</a></h2><p>接下来我们完善写一个我的页面，但是在写之前我们却遇到了一个问题，就是我们的文字显示乱码了。这里我们简单看一下是由于什么原因造成的。</p><p>看一下我们原本的页面 <img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580785902-c88c3e55-6042-417b-90c3-cb1fd6e2bbd2.webp" alt="" loading="lazy"></p><p>再看一下我们运行之后显示的界面 <img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786144-d718cbde-ef87-4887-b21b-bec9b3166977.webp" alt="" loading="lazy"></p><h3 id="_1-问题原因" tabindex="-1">（1）问题原因： <a class="header-anchor" href="#_1-问题原因" aria-label="Permalink to &quot;（1）问题原因：&quot;">​</a></h3><p>页面的编码格式不是 utf-8 造成的</p><h3 id="_2-解决方法" tabindex="-1">（2）解决方法 <a class="header-anchor" href="#_2-解决方法" aria-label="Permalink to &quot;（2）解决方法&quot;">​</a></h3><p>1 打开你的vue问题页面；<br> 2 点击左侧菜单栏文件，选择“以指定编码重新打开”，选择“UTF-8”，就可以了。</p><p><code>温馨提示：最好提前复制一下中文啥的，因为打开以后中文变了也</code></p><p>具体操作流程可以看这张图</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580785823-cec6effd-68b2-4a9b-92b5-3fbbe86d0b58.webp" alt="" loading="lazy"></p><p>再次运行（记得清理一下缓存），打开查看一下我们的页面，这里我们发现，整个页面已经可正常显示了 ！ <img src="https://cdn.nlark.com/yuque/0/2024/webp/22435914/1729580786188-9e483a79-fb2b-42c3-b6b6-3fca0a8f7be0.webp" alt="" loading="lazy"></p>`,35)]))}const E=s(n,[["render",l]]);export{c as __pageData,E as default};
