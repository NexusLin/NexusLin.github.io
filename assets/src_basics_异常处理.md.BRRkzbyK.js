import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.CqxIsSM8.js";const o=JSON.parse('{"title":"异常处理","description":"","frontmatter":{"outline":[1,3]},"headers":[],"relativePath":"src/basics/异常处理.md","filePath":"src/basics/异常处理.md","lastUpdated":1743124685000}'),h={name:"src/basics/异常处理.md"};function e(l,s,p,r,k,d){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h1><p>throw抛出异常，try/catch捕获异常，finally执行清理代码</p><h2 id="throw抛出异常" tabindex="-1">throw抛出异常 <a class="header-anchor" href="#throw抛出异常" aria-label="Permalink to &quot;throw抛出异常&quot;">​</a></h2><p>在javascript之中，throw语句用于抛出一个用户自定义的异常。当前函数会立即停止执行，并将控制权转移到最近的控制结构中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;错误信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>throw和throws的区别：</p><ul><li>throw是用于抛出异常的语句，而throws是用于声明函数可能会抛出异常的语句。</li><li>throw后面跟的是异常对象，而throws后面跟的是异常类型。</li><li>throw语句会立即停止当前函数的执行，并将控制权转移到最近的控制结构中。而throws语句只是声明函数可能会抛出异常，并不会立即停止当前函数的执行。</li><li>throw语句后面可以跟任何类型的异常对象，而throws后面只能跟异常类型。</li></ul><h2 id="try-catch捕获异常" tabindex="-1">try/catch捕获异常 <a class="header-anchor" href="#try-catch捕获异常" aria-label="Permalink to &quot;try/catch捕获异常&quot;">​</a></h2><p>try-catch语句用于捕获并处理异常。try块中的代码可能会抛出异常，而catch块中的代码用于处理这些异常。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 可能出现异常的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err1) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理异常的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err2) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理异常的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 无论是否出现异常都会执行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="debugger" tabindex="-1">debugger <a class="header-anchor" href="#debugger" aria-label="Permalink to &quot;debugger&quot;">​</a></h2><p>debugger语句用于在代码中设置断点，以便在调试器中暂停执行。当代码执行到debugger语句时，调试器会暂停执行，并允许开发人员检查代码的状态和变量的值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    debugger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>当执行到debugger语句时，调试器会暂停执行，并允许开发人员检查代码的状态和变量的值。</p>`,14)]))}const g=a(h,[["render",e]]);export{o as __pageData,g as default};
