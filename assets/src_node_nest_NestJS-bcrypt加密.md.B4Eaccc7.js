import{_ as a,c as i,ag as n,o as p}from"./chunks/framework.Bft4-MjQ.js";const E=JSON.parse('{"title":"NestJS-bcrypt加密解密使用","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/node/nest/NestJS-bcrypt加密.md","filePath":"src/node/nest/NestJS-bcrypt加密.md"}'),t={name:"src/node/nest/NestJS-bcrypt加密.md"};function l(e,s,h,k,r,d){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="nestjs-bcrypt加密解密使用" tabindex="-1">NestJS-bcrypt加密解密使用 <a class="header-anchor" href="#nestjs-bcrypt加密解密使用" aria-label="Permalink to &quot;NestJS-bcrypt加密解密使用&quot;">​</a></h1><h2 id="_1、认识安装" tabindex="-1">1、认识安装 <a class="header-anchor" href="#_1、认识安装" aria-label="Permalink to &quot;1、认识安装&quot;">​</a></h2><p>在 NestJS 中使用 <code>bcrypt</code> 来进行密码哈希和验证是非常常见的需求。<code>bcrypt</code> 是一个安全的哈希算法，它可以用于加密用户密码，并且提供了验证密码是否匹配的功能。</p><h3 id="👉安装-bcrypt" tabindex="-1">👉安装 <code>bcrypt</code> <a class="header-anchor" href="#👉安装-bcrypt" aria-label="Permalink to &quot;👉安装 \`bcrypt\`&quot;">​</a></h3><p>首先，你需要安装 <code>bcrypt</code> 库。使用以下命令进行安装：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install bcrypt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 这里我使用的版本是 &quot;bcrypt&quot;: &quot;^5.1.1&quot;,</span></span></code></pre></div><p>如果你使用的是 TypeScript，<code>bcrypt</code> 可能还需要安装类型定义文件，这里我的</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install @types/bcrypt --save-dev</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>//yarn方式安装</span></span>
<span class="line"><span>yarn add @types/bcrypt --save-dev</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 版本</span></span>
<span class="line"><span>&quot;@types/bcrypt&quot;: &quot;^5.0.2&quot;,</span></span></code></pre></div><h2 id="_2、使用-bcrypt" tabindex="-1">2、使用 <code>bcrypt</code> <a class="header-anchor" href="#_2、使用-bcrypt" aria-label="Permalink to &quot;2、使用 \`bcrypt\`&quot;">​</a></h2><h3 id="👉作用" tabindex="-1">👉作用 <a class="header-anchor" href="#👉作用" aria-label="Permalink to &quot;👉作用&quot;">​</a></h3><p>没有经过加密之前我们的密码是这样的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1111111111</span></span></code></pre></div><p>加密以后我们的密码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$10$D1L8Dh3L1NKTUaJsvr.7r.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dm6p19ix7e7ZwctuMZ1KzdTbEk1muO</span></span></code></pre></div><p>之前我们的密码都是明文存储的，接下来我们就加密解密对于密码进行验证</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registerDto.password;</span></span></code></pre></div><h3 id="👉注册迁移到auth模块" tabindex="-1">👉注册迁移到auth模块 <a class="header-anchor" href="#👉注册迁移到auth模块" aria-label="Permalink to &quot;👉注册迁移到auth模块&quot;">​</a></h3><p>之前我们注册模块在user模块之中，接下来我们迁移到auth授权模块</p><h5 id="auth-controller-ts" tabindex="-1">auth.controller.ts <a class="header-anchor" href="#auth-controller-ts" aria-label="Permalink to &quot;auth.controller.ts&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RegisterDto } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/response.dto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;register&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() registerDto: RegisterDto) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.authService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registerDto);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h5 id="auth-module-ts引入用户实体" tabindex="-1">auth.module.ts引入用户实体 <a class="header-anchor" href="#auth-module-ts引入用户实体" aria-label="Permalink to &quot;auth.module.ts引入用户实体&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { TypeOrmModule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@nestjs/typeorm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { User } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/modules/user/user.entity&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TypeOrmModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forFeature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([User]),  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册 User 实体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [AuthService, JwtStrategy],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  controllers: [AuthController],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h5 id="auth-service-ts" tabindex="-1">auth.service.ts <a class="header-anchor" href="#auth-service-ts" aria-label="Permalink to &quot;auth.service.ts&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { InjectRepository } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@nestjs/typeorm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RegisterDto } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/response.dto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { User } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/modules/user/user.entity&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 异步注册方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registerDto: RegisterDto) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 查询数据库中是否存在同名用户</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> existingUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ where: { username: registerDto.username } });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果存在同名用户，则抛出异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (existingUser) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      versionhello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户注册提示&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户已存在!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // throw new ConflictException(&#39;用户已存在！&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // return {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   data: [],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   message: &#39;用户已存在！&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   code: 400,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 适当的错误码是 400</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户已存在！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        HttpStatus.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BAD_REQUEST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 400 状态码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建新用户</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user.username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registerDto.username;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registerDto.password;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // user.password = hashedPassword;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> savedUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存到数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedUser, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;savedUser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回注册成功的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;恭喜你，您的账号注册成功！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h2 id="_3、加密解密" tabindex="-1">3、加密解密 <a class="header-anchor" href="#_3、加密解密" aria-label="Permalink to &quot;3、加密解密&quot;">​</a></h2><h3 id="👉加密" tabindex="-1">👉加密 <a class="header-anchor" href="#👉加密" aria-label="Permalink to &quot;👉加密&quot;">​</a></h3><p>正确引入迁移以后，接下来就可以针对密码进行加密和解密了</p><p>加密</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bcrypt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hashPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password: string): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const salt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">genSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成 salt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const hashedPassword </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password, salt);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用 salt 加密密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  return hashedPassword;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加密密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hashedPassword</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hashPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registerDto.password);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//直接使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashedPassword;</span></span></code></pre></div><p>加密以后得密码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$2b$10$D1L8Dh3L1NKTUaJsvr.7r.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dm6p19ix7e7ZwctuMZ1KzdTbEk1muO</span></span></code></pre></div><h3 id="👉解密" tabindex="-1">👉解密 <a class="header-anchor" href="#👉解密" aria-label="Permalink to &quot;👉解密&quot;">​</a></h3><p>加密完以后这个时候我们的密码已经入库，接下来在解密部分反翻译出密码对比，这部分在登录这里实现</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 验证密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validatePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password: string, hashedPassword: string): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const isMatch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password, hashedPassword);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比较密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return isMatch;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h5 id="完善auth-service-ts" tabindex="-1">完善auth.service.ts <a class="header-anchor" href="#完善auth-service-ts" aria-label="Permalink to &quot;完善auth.service.ts&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对比密码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isPasswordValid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validatePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoginDto.password, loginUser.password);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//简单对比一下用户的账号密码信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isPasswordValid){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;登录成功！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      token: token,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户名或密码错误！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h2 id="_4、完整示例" tabindex="-1">4、完整示例 <a class="header-anchor" href="#_4、完整示例" aria-label="Permalink to &quot;4、完整示例&quot;">​</a></h2><p>整个过程</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">注册时加密密码：注册时，使用 bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 加密密码，与盐值一起生成哈希密码。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">登录时验证密码：登录时，使用 bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 方法比较输入的密码和数据库中存储的哈希密码。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">盐值的轮数：bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">genSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 方法的 saltRounds 参数控制了生成盐值的复杂度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  常见的值是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,如果需要更强的加密，可以增加该值。</span></span></code></pre></div><p>完整的用户注册时使用 <code>bcrypt</code> 对用户密码进行加密</p><p>在服务层（如 <code>AuthService</code>）中处理密码的加密和验证</p><h3 id="👉示例" tabindex="-1">👉示例 <a class="header-anchor" href="#👉示例" aria-label="Permalink to &quot;👉示例&quot;">​</a></h3><p><code>AuthService</code> 中使用 <code>bcrypt</code></p><p><code>auth.service.ts</code> (加密和验证密码)</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>typescriptCopy Codeimport { Injectable } from &#39;@nestjs/common&#39;;</span></span>
<span class="line"><span>import * as bcrypt from &#39;bcrypt&#39;;</span></span>
<span class="line"><span>import { RegisterDto } from &#39;./dto/register.dto&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Injectable()</span></span>
<span class="line"><span>export class AuthService {</span></span>
<span class="line"><span>  private readonly saltRounds = 10; // 加密的盐值轮数，通常设为10或更高</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 加密密码</span></span>
<span class="line"><span>  async hashPassword(password: string): Promise&lt;string&gt; {</span></span>
<span class="line"><span>    const salt = await bcrypt.genSalt(this.saltRounds); // 生成盐值</span></span>
<span class="line"><span>    return await bcrypt.hash(password, salt);  // 生成加密密码</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 验证密码</span></span>
<span class="line"><span>  async validatePassword(password: string, hashedPassword: string): Promise&lt;boolean&gt; {</span></span>
<span class="line"><span>    return await bcrypt.compare(password, hashedPassword);  // 比较原密码和哈希密码</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 用户注册的逻辑</span></span>
<span class="line"><span>  async register(registerDto: RegisterDto): Promise&lt;string&gt; {</span></span>
<span class="line"><span>    const { password } = registerDto;</span></span>
<span class="line"><span>    const hashedPassword = await this.hashPassword(password);  // 将密码加密</span></span>
<span class="line"><span>    // 假设保存用户数据到数据库，通常会在这里调用 Repository 或 ORM 方法保存</span></span>
<span class="line"><span>    console.log(&#39;Hashed Password:&#39;, hashedPassword);</span></span>
<span class="line"><span>    return &#39;User registered successfully&#39;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>register.dto.ts</code></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>typescriptCopy Codeimport { IsString, IsEmail, IsNotEmpty, MinLength } from &#39;class-validator&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export class RegisterDto {</span></span>
<span class="line"><span>  @IsString()</span></span>
<span class="line"><span>  @IsNotEmpty()</span></span>
<span class="line"><span>  @MinLength(3)</span></span>
<span class="line"><span>  username: string;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @IsEmail()</span></span>
<span class="line"><span>  @IsNotEmpty()</span></span>
<span class="line"><span>  email: string;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @IsString()</span></span>
<span class="line"><span>  @IsNotEmpty()</span></span>
<span class="line"><span>  @MinLength(6)</span></span>
<span class="line"><span>  password: string;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>auth.controller.ts</code> (使用 <code>AuthService</code>)</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>typescriptCopy Codeimport { Body, Controller, Post } from &#39;@nestjs/common&#39;;</span></span>
<span class="line"><span>import { AuthService } from &#39;./auth.service&#39;;</span></span>
<span class="line"><span>import { RegisterDto } from &#39;./dto/register.dto&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Controller(&#39;auth&#39;)</span></span>
<span class="line"><span>export class AuthController {</span></span>
<span class="line"><span>  constructor(private readonly authService: AuthService) {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Post(&#39;register&#39;)</span></span>
<span class="line"><span>  async register(@Body() registerDto: RegisterDto) {</span></span>
<span class="line"><span>    return await this.authService.register(registerDto);  // 调用 AuthService 中的 register 方法</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="3"><li>使用 <code>bcrypt</code> 验证密码</li></ol><p>在用户登录时，你会需要将用户输入的密码与数据库中存储的哈希密码进行比较。这是通过 <code>bcrypt.compare()</code> 方法来实现的，它会对输入的密码进行哈希并与存储的哈希进行比较。</p><p>在上面的 <code>AuthService</code> 中，已经提供了一个 <code>validatePassword</code> 方法来验证密码是否正确。这个方法使用 <code>bcrypt.compare()</code> 来比较输入密码和哈希密码。</p><p>在 <code>AuthService</code> 中验证密码</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>typescriptCopy Code// 在 AuthService 中验证密码</span></span>
<span class="line"><span>async login(loginDto: LoginDto): Promise&lt;string&gt; {</span></span>
<span class="line"><span>  const { email, password } = loginDto;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 假设从数据库中获取用户的哈希密码</span></span>
<span class="line"><span>  const user = await this.userRepository.findOne({ where: { email } });</span></span>
<span class="line"><span>  if (!user) {</span></span>
<span class="line"><span>    throw new Error(&#39;User not found&#39;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 使用 bcrypt 比较密码</span></span>
<span class="line"><span>  const isPasswordValid = await this.validatePassword(password, user.password);</span></span>
<span class="line"><span>  if (!isPasswordValid) {</span></span>
<span class="line"><span>    throw new Error(&#39;Invalid credentials&#39;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return &#39;Login successful&#39;;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>通过以上方法，NestJS 中就能安全地加密和验证用户的密码了。</p>`,55)]))}const o=a(t,[["render",l]]);export{E as __pageData,o as default};
