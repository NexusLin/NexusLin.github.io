import{_ as e,c as a,o as r,ag as d}from"./chunks/framework.DnwzncJk.js";const g=JSON.parse('{"title":"NestJS项目技术","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/node/nest/NestJS-项目技术.md","filePath":"src/node/nest/NestJS-项目技术.md","lastUpdated":1748496767000}'),o={name:"src/node/nest/NestJS-项目技术.md"};function i(s,t,l,n,h,c){return r(),a("div",null,t[0]||(t[0]=[d('<h1 id="nestjs项目技术" tabindex="-1">NestJS项目技术 <a class="header-anchor" href="#nestjs项目技术" aria-label="Permalink to &quot;NestJS项目技术&quot;">​</a></h1><p>接下来我们简单介绍一下我们的项目采用的技术以及达到的目标</p><h2 id="项目概览" tabindex="-1">项目概览 <a class="header-anchor" href="#项目概览" aria-label="Permalink to &quot;项目概览&quot;">​</a></h2><h3 id="👉最终目标" tabindex="-1">👉最终目标 <a class="header-anchor" href="#👉最终目标" aria-label="Permalink to &quot;👉最终目标&quot;">​</a></h3><p>通过本项目学习并实践：</p><ul><li>构建一个完整的 Web 应用，包含数据库、身份验证、文件上传、日志记录等核心功能。</li><li>使用现代 DevOps 工具（Docker、GitHub Actions）实现自动化部署。</li><li>实现高效的数据存储与缓存（通过 Redis）。</li><li>实现良好的代码结构和 API 设计，生成自动化文档。</li></ul><h3 id="👉相关技术和工具" tabindex="-1">👉相关技术和工具 <a class="header-anchor" href="#👉相关技术和工具" aria-label="Permalink to &quot;👉相关技术和工具&quot;">​</a></h3><p>简单看看我们项目使用的相关技术和工具</p><table tabindex="0"><thead><tr><th><strong>功能</strong></th><th><strong>实现方式</strong></th><th><strong>技术/工具</strong></th></tr></thead><tbody><tr><td><strong>数据库连接 &amp; CRUD 操作</strong></td><td>使用 TypeORM 连接数据库，实现简单的增删改查（CRUD）操作。</td><td>TypeORM, MySQL/PostgreSQL等数据库</td></tr><tr><td><strong>接口统一格式 &amp; 自动生成 Swagger 文档</strong></td><td>统一接口格式，自动生成 API 文档。</td><td>NestJS, Swagger</td></tr><tr><td><strong>Docker + GitHub Action 自动化部署</strong></td><td>使用 Docker 容器化应用，并通过 GitHub Actions 自动化部署到腾讯云服务器。</td><td>Docker, GitHub Actions, 腾讯云</td></tr><tr><td><strong>通过域名访问接口</strong></td><td>配置域名指向服务器，使得可以通过域名访问接口。</td><td>腾讯云服务器, 域名配置</td></tr><tr><td><strong>JWT 用户注册登录与身份验证</strong></td><td>使用 JWT 实现用户注册、登录功能，并进行身份验证。</td><td>JWT, NestJS</td></tr><tr><td><strong>JWT Token 拦截器</strong></td><td>在 API 请求中通过拦截器验证 Token，若无 Token 或 Token 无效返回 401 错误。</td><td>JWT, NestJS, Guards</td></tr><tr><td><strong>Redis 数据库使用</strong></td><td>安装 Redis 数据库并在 NestJS 中进行应用，提升缓存、队列等处理效率。</td><td>Redis, NestJS</td></tr><tr><td><strong>文件上传功能</strong></td><td>使用 Multer 实现文件上传，并支持文件存储在本地或云存储中。</td><td>Multer, NestJS</td></tr><tr><td><strong>日志记录功能</strong></td><td>使用 Winston 进行日志记录，保存应用日志、错误日志等信息。</td><td>Winston, NestJS</td></tr><tr><td><strong>定时任务调度</strong></td><td>使用 @nestjs/schedule 封装定时器，实现定时任务的调度。</td><td>@nestjs/schedule</td></tr></tbody></table><h3 id="👉详细步骤与说明" tabindex="-1">👉详细步骤与说明 <a class="header-anchor" href="#👉详细步骤与说明" aria-label="Permalink to &quot;👉详细步骤与说明&quot;">​</a></h3><h4 id="_1-数据库连接-crud-操作" tabindex="-1">1. 数据库连接 &amp; CRUD 操作 <a class="header-anchor" href="#_1-数据库连接-crud-操作" aria-label="Permalink to &quot;1. 数据库连接 &amp; CRUD 操作&quot;">​</a></h4><ul><li>使用 TypeORM 进行数据库连接，创建实体和对应的仓库进行增删改查操作。</li></ul><h4 id="_2-接口统一格式-swagger-文档生成" tabindex="-1">2. 接口统一格式 &amp; Swagger 文档生成 <a class="header-anchor" href="#_2-接口统一格式-swagger-文档生成" aria-label="Permalink to &quot;2. 接口统一格式 &amp; Swagger 文档生成&quot;">​</a></h4><ul><li>配置 NestJS 自动生成 Swagger API 文档，提供统一接口格式。</li><li>使用 <code>@nestjs/swagger</code> 包生成接口文档。</li></ul><h4 id="_3-docker-github-actions-自动化部署" tabindex="-1">3. Docker + GitHub Actions 自动化部署 <a class="header-anchor" href="#_3-docker-github-actions-自动化部署" aria-label="Permalink to &quot;3. Docker + GitHub Actions 自动化部署&quot;">​</a></h4><ul><li>使用 Docker 容器化应用，编写 <code>Dockerfile</code> 和 <code>docker-compose.yml</code>。</li><li>配置 GitHub Actions，实现代码推送时自动构建、测试和部署。</li><li>使用腾讯云服务器作为部署目标，确保可以通过域名访问接口。</li></ul><h4 id="_4-jwt-用户注册与身份验证" tabindex="-1">4. JWT 用户注册与身份验证 <a class="header-anchor" href="#_4-jwt-用户注册与身份验证" aria-label="Permalink to &quot;4. JWT 用户注册与身份验证&quot;">​</a></h4><ul><li>用户通过 POST 请求注册账号，通过 JWT 生成 Token。</li><li>登录时，使用 JWT 验证用户身份，返回认证 Token。</li><li>配置 Guards 和拦截器，确保每个请求都经过身份验证。</li></ul><h4 id="_5-redis-数据库使用" tabindex="-1">5. Redis 数据库使用 <a class="header-anchor" href="#_5-redis-数据库使用" aria-label="Permalink to &quot;5. Redis 数据库使用&quot;">​</a></h4><ul><li>安装 Redis，配置 Redis 与 NestJS 进行连接。</li><li>在应用中使用 Redis 存储和读取缓存数据，提升性能。</li></ul><h4 id="_6-文件上传功能" tabindex="-1">6. 文件上传功能 <a class="header-anchor" href="#_6-文件上传功能" aria-label="Permalink to &quot;6. 文件上传功能&quot;">​</a></h4><ul><li>使用 Multer 配置文件上传功能，支持多种文件类型上传。</li><li>配置文件存储路径，本地或云存储（如阿里云、腾讯云）。</li></ul><h4 id="_7-日志记录功能" tabindex="-1">7. 日志记录功能 <a class="header-anchor" href="#_7-日志记录功能" aria-label="Permalink to &quot;7. 日志记录功能&quot;">​</a></h4><ul><li>配置 Winston 实现日志记录，包括请求日志、错误日志等。</li><li>支持多种日志输出格式和日志等级（如 info, warn, error）。</li></ul><h4 id="_8-定时任务调度" tabindex="-1">8. 定时任务调度 <a class="header-anchor" href="#_8-定时任务调度" aria-label="Permalink to &quot;8. 定时任务调度&quot;">​</a></h4><ul><li>使用 <code>@nestjs/schedule</code> 实现定时任务调度。</li><li>配置定时任务执行周期，并处理定时任务逻辑。</li></ul>',26)]))}const _=e(o,[["render",i]]);export{g as __pageData,_ as default};
