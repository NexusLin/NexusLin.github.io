import{_ as a,c as i,ag as n,o as e}from"./chunks/framework.wRLzwZz-.js";const t="/images/node2-1.png",c=JSON.parse('{"title":"❤Node环境安装和依赖使用","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/Node/Node-环境安装和依赖配置.md","filePath":"src/Node/Node-环境安装和依赖配置.md"}'),p={name:"src/Node/Node-环境安装和依赖配置.md"};function l(h,s,k,d,r,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="❤node环境安装和依赖使用" tabindex="-1">❤Node环境安装和依赖使用 <a class="header-anchor" href="#❤node环境安装和依赖使用" aria-label="Permalink to &quot;❤Node环境安装和依赖使用&quot;">​</a></h1><h2 id="_1、环境检查" tabindex="-1">1、环境检查 <a class="header-anchor" href="#_1、环境检查" aria-label="Permalink to &quot;1、环境检查&quot;">​</a></h2><p>先来检查一下我们本地版本，确保环境无误,环境不一致的建议使用nvm管理nodejs版本，更换为一致的环境。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span></code></pre></div><p>这里是我本地的版本</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v20.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //node版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //npm版本</span></span></code></pre></div><p><img src="`+t+`" alt="image.png"></p><h2 id="_2、项目搭建" tabindex="-1">2、项目搭建 <a class="header-anchor" href="#_2、项目搭建" aria-label="Permalink to &quot;2、项目搭建&quot;">​</a></h2><p>找一个空的文件夹，采取英文命名。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mkdir Nexusapi </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd Nexusapi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn init</span></span></code></pre></div><p>这个时候我们Nexusapi文件夹下已经生成了package.json项目配置,项目文档目录结构如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Nexusapi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── node_modules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── yarn.lock</span></span></code></pre></div><h2 id="_3、安装依赖" tabindex="-1">3、安装依赖 <a class="header-anchor" href="#_3、安装依赖" aria-label="Permalink to &quot;3、安装依赖&quot;">​</a></h2><h3 id="安装核心依赖命令一览" tabindex="-1">安装核心依赖命令一览 <a class="header-anchor" href="#安装核心依赖命令一览" aria-label="Permalink to &quot;安装核心依赖命令一览&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add express   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add mysql     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add cors      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jwt  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add jsonwebtoken </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add multer </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add ws </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (暂时不使用)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (暂时不使用)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add nodemon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (暂时不使用)</span></span></code></pre></div><h3 id="_1-express" tabindex="-1">（1）express <a class="header-anchor" href="#_1-express" aria-label="Permalink to &quot;（1）express&quot;">​</a></h3><p>Express 是一个流行的 Node.js Web 应用程序框架，用来给砸门的项目来构建后台接口 用于构建 Rest API 帮助前后端实现通讯</p><p>安装使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add express</span></span></code></pre></div><h3 id="_2-mysql-数据库" tabindex="-1">（2）MySQL 数据库 <a class="header-anchor" href="#_2-mysql-数据库" aria-label="Permalink to &quot;（2）MySQL 数据库&quot;">​</a></h3><p>Node.js 中连接 MySQL 数据库并编写后台接口，需要安装mysql依赖：</p><p><strong>mysql</strong>: 是一个 MySQL 客户端库，用于在 Node.js 中连接和操作 MySQL 数据库。你可以使用它执行 SQL 查询、插入、更新、删除等操作。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add mysql</span></span></code></pre></div><h3 id="_3-cors-跨域使用" tabindex="-1">（3）<strong>cors</strong> 跨域使用 <a class="header-anchor" href="#_3-cors-跨域使用" aria-label="Permalink to &quot;（3）**cors** 跨域使用&quot;">​</a></h3><p>cors 提供 Express 中间件 CORS（跨源资源共享）是一种安全机制，用于控制在不同源之间的资源共享。当你在使用 Node.js 构建服务器时，可能会遇到跨域资源访问的问题，特别是在处理前端应用程序向服务器发送的 AJAX 请求时。</p><h4 id="cors-处理接口跨域" tabindex="-1">cors(处理接口跨域) <a class="header-anchor" href="#cors-处理接口跨域" aria-label="Permalink to &quot;cors(处理接口跨域)&quot;">​</a></h4><p>下载cors，用于处理接口跨域问题</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add cors </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//安装cors</span></span></code></pre></div><ul><li><code>corsOptions</code> 这里设置了可访问后端的前端来源为 <code>*</code> ，这意味着任何前端都可以接入此后端。这样设置并不安全，为了避免「跨域问题」，先这么设置。之后请在这里限制可访问的前端服务器。</li></ul><h3 id="_4-body-parser-处理编码数据-可选-使用" tabindex="-1">（4）body-parser(处理编码数据-可选-使用) <a class="header-anchor" href="#_4-body-parser-处理编码数据-可选-使用" aria-label="Permalink to &quot;（4）body-parser(处理编码数据-可选-使用)&quot;">​</a></h3><p><strong>body-parser</strong>是node.js中间件，用于处理JSON,Raw,Text和URL编码的数据。</p><p>这个中间件用来解析POST请求中的数据，解析请求体中的JSON 数据或表单数据，使用 body-parser 中间件来实现。在最新版本的Express中，<code>express.json()</code> 和 <code>express.urlencoded()</code> 替代了 body-parser，换句话说，req.body 对象 就是它提供的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span></span></code></pre></div><p>app.js之中我们可以用来对数据进行优化处理</p><h3 id="_5-express-jwt" tabindex="-1">（5）<strong>express-jwt</strong> <a class="header-anchor" href="#_5-express-jwt" aria-label="Permalink to &quot;（5）**express-jwt**&quot;">​</a></h3><p>Express-jwt 是一个用于验证 JSON Web Tokens（JWT）的 Express 中间件。它使得在 Express 应用程序中验证 token 变得简单</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add  express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jwt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span></span></code></pre></div><h3 id="_6-jsonwebtoken" tabindex="-1">（6）<strong>jsonwebtoken</strong> <a class="header-anchor" href="#_6-jsonwebtoken" aria-label="Permalink to &quot;（6）**jsonwebtoken**&quot;">​</a></h3><p>JSON Web Token（JWT）是一种用于安全传输信息的开放标准（RFC 7519）。在 Node.js 中，你可以使用 <code>jsonwebtoken</code> 模块来生成、解析和验证 JWT。以下是在 Node.js 中使用 <code>jsonwebtoken</code> 的基本步骤：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add  express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jwt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//导入jsonwebtoken生成 jwt 字符串的包</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jwt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonwebtoken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用jsonwebtoken</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">secretKey是自己定义的密码盐</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(就是自定义的字符串)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tokenStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jwt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({username: req.body.username },secretKey, { expiresIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;24h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这里注册的tokenStr就是我们的有效Token，可以理解为一种身份认证牌子。</span></span></code></pre></div><h3 id="_7-multer" tabindex="-1">（7）<strong>multer</strong> <a class="header-anchor" href="#_7-multer" aria-label="Permalink to &quot;（7）**multer**&quot;">​</a></h3><p><code>multer</code> 是一个node.js中间件，专门用于处理 <code>multipart/form-data</code> （enctype=&quot;multipart/form-data&quot;设置表单的MIME编码）类型的表单数据，主要用于上传文件。这种类型的数据主要用在表单中，特别是用于上传文件到服务器。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add  multer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span></span></code></pre></div><h3 id="_8-ws模块" tabindex="-1">（8）ws模块 <a class="header-anchor" href="#_8-ws模块" aria-label="Permalink to &quot;（8）ws模块&quot;">​</a></h3><p>ws是易于使用的 WebSocket 客户端和服务器库，<code>ws</code> 模块为 Node.js 提供了一个便捷的方式来实现 WebSocket 功能，使得开发者可以轻松地构建支持实时双向通信的 Web 应用程序。WebSocket 是一种在 Web 应用程序中实现实时双向通信的协议，它允许服务器和客户端之间建立持久连接，以便实时地传输数据。 <code>ws</code> 模块的主要作用包括：</p><ol><li><strong>WebSocket 服务器端实现</strong>：<code>ws</code> 模块允许你在 Node.js 中轻松创建 WebSocket 服务器，从而使你的应用程序能够接受和处理来自客户端的 WebSocket 连接。</li><li><strong>WebSocket 客户端实现</strong>：除了服务器端实现外，<code>ws</code> 模块还提供了 WebSocket 客户端功能，使得你可以在 Node.js 中编写客户端代码来连接到 WebSocket 服务器，并与之进行双向通信。</li><li><strong>简单易用</strong>：<code>ws</code> 模块设计简单，易于使用，提供了一组直观的 API，使得创建 WebSocket 服务器和客户端变得非常容易。</li><li><strong>高性能</strong>：<code>ws</code> 模块具有良好的性能，适用于处理大量的 WebSocket 连接，并且可以有效地处理实时数据传输。</li></ol><h3 id="_9-dotenv-可选-未使用" tabindex="-1">（9）<strong>dotenv</strong>（可选-未使用） <a class="header-anchor" href="#_9-dotenv-可选-未使用" aria-label="Permalink to &quot;（9）**dotenv**（可选-未使用）&quot;">​</a></h3><p>从环境变量中读取敏感信息，比如数据库连接信息，你可以使用 dotenv 模块。它允许你将这些信息存储在一个名为 <code>.env</code> 的文件中，并在应用程序中使用 <code>process.env</code> 来访问它们。</p><h3 id="_10-ejs模块-可选" tabindex="-1">（10）ejs模块（可选） <a class="header-anchor" href="#_10-ejs模块-可选" aria-label="Permalink to &quot;（10）ejs模块（可选）&quot;">​</a></h3><ol><li><strong>ejs</strong>（可选）可以在服务器端渲染聊天页面，你可以选择使用 ejs 或其他模板引擎</li></ol><h3 id="_11-nodemon使用-可选" tabindex="-1">（11）nodemon使用（可选） <a class="header-anchor" href="#_11-nodemon使用-可选" aria-label="Permalink to &quot;（11）nodemon使用（可选）&quot;">​</a></h3><p>🍓 nodemon</p><p>用于自动重启 Node.js 应用的工具。它监视文件的变化，并在源代码发生变化时自动重新启动应用,用于开发环境提升开发效率。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">### 开发环境安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install nodemon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">### 全局安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g nodemon</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">### 验证安装成功没有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodemon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">### nodemon命令行参数配置帮助</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodemon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">help</span></span></code></pre></div><p>🍓 使用</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">之前我们启动服务器是这样启动的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">现在我们使用nodemon启动服务器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodemon app.js</span></span></code></pre></div><h3 id="_12-cookie-parser-可选-未使用" tabindex="-1">（12）<strong>cookie-parser</strong>（可选-未使用） <a class="header-anchor" href="#_12-cookie-parser-可选-未使用" aria-label="Permalink to &quot;（12）**cookie-parser**（可选-未使用）&quot;">​</a></h3><p>就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn add  cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span></span></code></pre></div><h2 id="_4、引入和使用" tabindex="-1">4、引入和使用 <a class="header-anchor" href="#_4、引入和使用" aria-label="Permalink to &quot;4、引入和使用&quot;">​</a></h2><h4 id="引入" tabindex="-1">引入: <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入:&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> express </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;express&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cors&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bodyParser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;body-parser&#39;</span></span></code></pre></div><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 中间件，用于解析 POST 请求体中的 JSON 数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bodyParser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置解析，用于解析json和urlencoded格式的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bodyParser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">urlencoded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({extended: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}));</span></span></code></pre></div><h2 id="_5、启动" tabindex="-1">5、启动 <a class="header-anchor" href="#_5、启动" aria-label="Permalink to &quot;5、启动&quot;">​</a></h2><blockquote><p>新建文件夹server，下面新建app.js文件，内容如下</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我是Nexusapi服务器端!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>进入根目录下例如server文件以后cmd进行启动</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd server（你的根目录文件目录下，如果app在根目录下则不需要）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node app.js</span></span></code></pre></div><p>控制台可以输出</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">我是Nexusapi服务器端</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><p>这个时候就证明砸门Node后台项目已经搭建好了。</p>`,72)]))}const g=a(p,[["render",l]]);export{c as __pageData,g as default};
