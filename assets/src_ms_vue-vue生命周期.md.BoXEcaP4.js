import{_ as t,c as i,o as a,ag as e}from"./chunks/framework.CqxIsSM8.js";const E=JSON.parse('{"title":"生命周期","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/ms/vue-vue生命周期.md","filePath":"src/ms/vue-vue生命周期.md","lastUpdated":1750413191000}'),d={name:"src/ms/vue-vue生命周期.md"};function n(l,s,h,p,o,r){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><p>对于生命周期的理解可以理解为一个组件从创建到销毁的全过程，也有人俗称是一个组件从出生到死亡,从摇篮到坟墓（Cradle-to-Grave）的过程</p><h3 id="vue-2-x-的生命周期" tabindex="-1">Vue 2.x 的生命周期 <a class="header-anchor" href="#vue-2-x-的生命周期" aria-label="Permalink to &quot;Vue 2.x 的生命周期&quot;">​</a></h3><h4 id="生命周期-1" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期-1" aria-label="Permalink to &quot;生命周期&quot;">​</a></h4><p>常见的生命周期钩子函数可以分数为四个阶段（对应8个钩子函数）以及两个特殊阶段（组件的激活和停用2个钩子函数<code>activated</code>和<code>deactivated</code>）以及1个错误处理钩子函数（<code>errorCaptured</code>）</p><table tabindex="0"><thead><tr><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>组件实例被创建之初</td></tr><tr><td><code>created</code></td><td>组件实例已经完全创建</td></tr><tr><td><code>beforeMount</code></td><td>组件挂载之前</td></tr><tr><td><code>mounted</code></td><td>组件挂载到实例上去之后</td></tr><tr><td><code>beforeUpdate</code></td><td>组件数据发生变化，更新之前</td></tr><tr><td><code>updated</code></td><td>组件数据更新之后</td></tr><tr><td><code>beforeDestroy</code></td><td>组件实例销毁之前</td></tr><tr><td><code>destroyed</code></td><td>组件实例销毁之后</td></tr><tr><td><code>activated</code></td><td><code>keep-alive</code> 缓存的组件激活时</td></tr><tr><td><code>deactivated</code></td><td><code>keep-alive</code> 缓存的组件停用时</td></tr><tr><td><code>errorCaptured</code></td><td>捕获一个来自子孙组件的错误时</td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;created&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeMount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeUpdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;updated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeDestroy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  destroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;destroyed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="具体分析" tabindex="-1">具体分析 <a class="header-anchor" href="#具体分析" aria-label="Permalink to &quot;具体分析&quot;">​</a></h4><table tabindex="0"><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td><strong>beforeCreate</strong></td><td>初始化 Vue 实例，开始数据观测。</td></tr><tr><td><strong>created</strong></td><td>完成数据观测，属性与方法的运算，<br><code>watch</code> 和事件回调的配置。<br>可调用 <code>methods</code> 中的方法，访问和修改 <code>data</code> 数据。此时 <code>vm.$el</code> 并未创建。</td></tr><tr><td><strong>created -&gt; beforeMount</strong></td><td>判断是否存在 <code>el</code> 选项，若不存在则停止编译，直到调用 <code>vm.$mount(el)</code> 才会继续编译。<br>优先级：<code>render</code> &gt; <code>template</code> &gt; <code>outerHTML</code>。此时获取的是挂载 DOM 的元素。</td></tr><tr><td><strong>beforeMount</strong></td><td>在此阶段可以获取到 <code>vm.el</code>，但 <code>vm.el</code> 并未挂载到 <code>el</code> 选项对应的 DOM 元素上。</td></tr><tr><td><strong>beforeMount -&gt; mounted</strong></td><td>此阶段 <code>vm.el</code> 已完成挂载，<code>vm.$el</code> 生成的 DOM 替换了 <code>el</code> 选项所对应的 DOM。</td></tr><tr><td><strong>mounted</strong></td><td><code>vm.el</code> 已完成 DOM 的挂载与渲染，打印 <code>vm.$el</code> 可以看到挂载点已被新的 DOM 替换。</td></tr><tr><td><strong>beforeUpdate</strong></td><td>更新的数据必须是被渲染在模板上的（<code>el</code>、<code>template</code>、<code>render</code> 之一）。此时 <code>view</code> 层还未更新。若在 <code>beforeUpdate</code> 中修改数据，不会再次触发更新方法。</td></tr><tr><td><strong>updated</strong></td><td>完成 <code>view</code> 层的更新。若在 <code>updated</code> 中修改数据，会再次触发更新方法（<code>beforeUpdate</code>、<code>updated</code>）。</td></tr><tr><td><strong>beforeDestroy</strong></td><td>实例被销毁前调用，实例的属性与方法仍可访问。</td></tr><tr><td><strong>destroyed</strong></td><td>完全销毁一个实例，清理它与其它实例的连接，解绑它的全部指令及事件监听器。并不能清除 DOM，仅销毁实例。</td></tr></tbody></table><p><strong>使用场景分析</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">生命周期</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">beforeCreate</td><td style="text-align:left;">执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务</td></tr><tr><td style="text-align:left;">created</td><td style="text-align:left;">组件初始化完毕，各种数据可以使用，常用于异步数据获取</td></tr><tr><td style="text-align:left;">beforeMount</td><td style="text-align:left;">未执行渲染、更新，dom未创建</td></tr><tr><td style="text-align:left;">mounted</td><td style="text-align:left;">初始化结束，dom已创建，可用于获取访问数据和dom元素</td></tr><tr><td style="text-align:left;">beforeUpdate</td><td style="text-align:left;">更新前，可用于获取更新前各种状态</td></tr><tr><td style="text-align:left;">updated</td><td style="text-align:left;">更新后，所有状态已是最新</td></tr><tr><td style="text-align:left;">beforeDestroy</td><td style="text-align:left;">销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td style="text-align:left;">destroyed</td><td style="text-align:left;">组件已销毁，作用同上</td></tr></tbody></table><h4 id="数据请求在created和mouted的区别" tabindex="-1">数据请求在created和mouted的区别 <a class="header-anchor" href="#数据请求在created和mouted的区别" aria-label="Permalink to &quot;数据请求在created和mouted的区别&quot;">​</a></h4><p>created是在组件实例一旦创建完成的时候立刻调用，这时候页面dom节点并未生成；mounted是在页面dom节点渲染完毕之后就立刻执行的。触发时机上created是比mounted要更早的，两者的相同点：都能拿到实例对象的属性和方法。 讨论这个问题本质就是触发的时机，放在mounted中的请求有可能导致页面闪动（因为此时页面dom结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。建议对页面内容的改动放在created生命周期当中。</p><h3 id="vue3-x的生命周期" tabindex="-1">Vue3.x的生命周期 <a class="header-anchor" href="#vue3-x的生命周期" aria-label="Permalink to &quot;Vue3.x的生命周期&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onBeforeMount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onMounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onBeforeUpdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onUpdated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onBeforeUnmount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onUnmounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onUnmounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><table tabindex="0"><thead><tr><th>生命周期钩子</th><th>作用</th><th>Vue 做了什么</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>beforeCreate</strong></td><td>在 Vue 实例创建之前调用</td><td>尚未初始化数据、事件、<code>data</code>、<code>computed</code> 等</td><td>不常用，通常在这里不能访问任何数据或事件</td></tr><tr><td><strong>created</strong></td><td>Vue 实例创建并初始化后调用，数据已初始化</td><td>初始化响应式数据，设置事件监听器，<code>computed</code> 和 <code>watch</code> 设置</td><td>初始化数据、执行异步操作或设置 API 调用等任务</td></tr><tr><td><strong>beforeMount</strong></td><td>在 <code>mounted</code> 钩子之前调用，模板已编译但尚未挂载到 DOM</td><td>Vue 即将挂载组件到 DOM，但尚未执行任何 DOM 更新</td><td>做挂载前的准备工作，如修改 DOM 或计算初始值</td></tr><tr><td><strong>mounted</strong></td><td>在组件挂载到 DOM 后调用</td><td>视图已渲染，<code>mounted</code> 钩子执行</td><td>适合操作 DOM，如获取元素、添加事件监听器、发起异步请求等</td></tr><tr><td><strong>beforeUpdate</strong></td><td>数据变化后，DOM 更新之前调用</td><td>数据变化，但视图尚未更新</td><td>执行在数据变化前的准备工作，如记录变化前的状态</td></tr><tr><td><strong>updated</strong></td><td>数据变化并导致 DOM 更新后调用</td><td>视图已更新，<code>updated</code> 钩子执行</td><td>操作更新后的 DOM，或与外部库进行交互，如更新图表等</td></tr><tr><td><strong>beforeUnmount</strong></td><td>组件销毁之前调用</td><td>组件即将销毁，但尚未从 DOM 中移除</td><td>清理任务，如取消订阅、移除事件监听器等</td></tr><tr><td><strong>unmounted</strong></td><td>组件销毁后调用，DOM 和子组件已被销毁</td><td>完全销毁组件，移除事件监听器，清理资源</td><td>销毁组件时的清理操作，如清除定时器、取消 HTTP 请求等</td></tr></tbody></table><h3 id="vue3特有生命周期钩子-composition-api" tabindex="-1">Vue3特有生命周期钩子（Composition API） <a class="header-anchor" href="#vue3特有生命周期钩子-composition-api" aria-label="Permalink to &quot;Vue3特有生命周期钩子（Composition API）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>生命周期钩子</th><th>作用</th><th>Vue 做了什么</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>setup()</strong></td><td>Vue 3 新增的生命周期钩子，位于实例创建之前执行</td><td>初始化响应式数据 (<code>ref</code> 和 <code>reactive</code>)，返回 <code>data</code>、<code>computed</code>、<code>methods</code> 等供模板使用</td><td>设置组件的响应式数据、方法、生命周期钩子、组合式逻辑等</td></tr><tr><td><strong>onBeforeMount</strong></td><td>在组件挂载之前调用，类似于 <code>beforeMount</code></td><td>组件挂载前调用</td><td>在 <code>setup</code> 中使用，可以替代 <code>beforeMount</code></td></tr><tr><td><strong>onMounted</strong></td><td>在组件挂载后调用，类似于 <code>mounted</code></td><td>组件挂载完成后调用</td><td>在 <code>setup</code> 中使用，可以替代 <code>mounted</code></td></tr><tr><td><strong>onBeforeUpdate</strong></td><td>数据更新前调用，类似于 <code>beforeUpdate</code></td><td>数据变化前调用</td><td>在 <code>setup</code> 中使用，可以替代 <code>beforeUpdate</code></td></tr><tr><td><strong>onUpdated</strong></td><td>数据更新后调用，类似于 <code>updated</code></td><td>数据更新后调用</td><td>在 <code>setup</code> 中使用，可以替代 <code>updated</code></td></tr><tr><td><strong>onBeforeUnmount</strong></td><td>在组件销毁前调用，类似于 <code>beforeDestroy</code></td><td>组件即将销毁前调用</td><td>在 <code>setup</code> 中使用，可以替代 <code>beforeDestroy</code></td></tr><tr><td><strong>onUnmounted</strong></td><td>在组件销毁后调用，类似于 <code>destroyed</code></td><td>组件销毁后调用</td><td>在 <code>setup</code> 中使用，可以替代 <code>destroyed</code></td></tr></tbody></table>`,18)]))}const c=t(d,[["render",n]]);export{E as __pageData,c as default};
