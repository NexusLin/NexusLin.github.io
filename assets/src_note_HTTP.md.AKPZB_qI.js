import{_ as a,n as s,q as n,t as i}from"./chunks/theme-components.DDZ15eKn.js";import"./chunks/search-index.B-gvvmFQ.js";const t=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/note/HTTP.md","filePath":"src/note/HTTP.md","lastUpdated":1743124685000}');const p=a({name:"src/note/HTTP.md"},[["render",function(a,t,p,e,l,o){return n(),s("div",null,t[0]||(t[0]=[i('<h2 id="http请求头" tabindex="-1">Http请求头 <a class="header-anchor" href="#http请求头" aria-label="Permalink to &quot;Http请求头&quot;">​</a></h2><p><code>application/x-www-form-urlencoded</code> 和 <code>multipart/form-data</code> 都是 HTTP 请求中的 <strong>Content-Type</strong> 类型，用来描述请求体（body）中数据的格式。这两种格式在使用场景和数据传输方式上有所不同。</p><h3 id="_1-application-x-www-form-urlencoded" tabindex="-1">1. <code>application/x-www-form-urlencoded</code> <a class="header-anchor" href="#_1-application-x-www-form-urlencoded" aria-label="Permalink to &quot;1. `application/x-www-form-urlencoded`&quot;">​</a></h3><ul><li><strong>主要用途</strong>：这种格式通常用于提交表单数据，尤其是那些包含文本数据的表单</li></ul><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数据编码方式</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在这种格式下，所有的数据都会以键值对的形式进行编码，键和值之间使用等号（</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`=`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）连接，不同的键值对之间使用 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`&amp;`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 分隔。</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 特殊字符（如空格、</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`&amp;`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`=`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 等）会被 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 编码成百分比（</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`%`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）形式。例如，空格会被编码为 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`+`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，而 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`&amp;`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 会被编码为 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`%26`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。</span></span></code></pre></div><p>示例：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Copy Codeusername=johndoe&amp;password=123456</span></span></code></pre></div><ul><li><strong>请求体示例</strong>：</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Copy Codekey1=value1&amp;key2=value2&amp;key3=value3</span></span></code></pre></div><ul><li><strong>适用场景</strong>：适用于简单的表单数据提交，如用户名和密码的登录表单等。</li><li><strong>限制</strong>： <ul><li>由于数据是 URL 编码的，发送的文件数据会被编码为字符串格式，无法直接传输二进制数据（如文件、图片）。</li><li>它通常用于较小的数据量，因为大数据量的编码可能会使请求体变得非常庞大。</li></ul></li><li><strong>示例代码</strong>：</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>javascriptCopy Codeaxios.post(&#39;https://example.com&#39;, {</span></span>\n<span class="line"><span>  headers: { &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39; },</span></span>\n<span class="line"><span>  data: &#39;key1=value1&amp;key2=value2&#39;</span></span>\n<span class="line"><span>});</span></span></code></pre></div><h3 id="_2-multipart-form-data" tabindex="-1">2. <code>multipart/form-data</code> <a class="header-anchor" href="#_2-multipart-form-data" aria-label="Permalink to &quot;2. `multipart/form-data`&quot;">​</a></h3><ul><li><strong>主要用途</strong>：这种格式用于上传文件或处理包含文件和二进制数据的表单。它允许在同一个请求中提交文本和文件数据。</li><li><strong>数据编码方式</strong>： <ul><li>在这种格式下，表单数据会被分成多个部分，每个部分都有自己的内容类型。每个部分都会用一个分隔符（boundary）隔开。每个部分可以包含不同的数据类型，包括文本和文件（如二进制文件）。</li><li>文件数据不会进行 URL 编码，而是以其原始二进制格式传输。</li></ul></li></ul><p>示例：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Copy Code--boundary</span></span>\n<span class="line"><span>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;image.jpg&quot;</span></span>\n<span class="line"><span>Content-Type: image/jpeg</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>(binary data of the file)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>--boundary--</span></span></code></pre></div><ul><li><strong>请求体示例</strong>：</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Copy Code--boundary</span></span>\n<span class="line"><span>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;image.png&quot;</span></span>\n<span class="line"><span>Content-Type: image/png</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>(binary data)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>--boundary--</span></span></code></pre></div><ul><li><strong>适用场景</strong>：适用于文件上传（如图片、音频、视频等）以及包含混合数据（文本和文件）的表单提交。</li><li><strong>限制</strong>： <ul><li>由于数据格式复杂，并且允许发送文件，这种格式会比 <code>application/x-www-form-urlencoded</code> 更加占用带宽和资源。</li><li>使用这种格式时，通常会自动生成一个 <code>boundary</code>，用来区分每个数据部分。</li></ul></li><li><strong>示例代码</strong>：</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>javascriptCopy Codeconst formData = new FormData();</span></span>\n<span class="line"><span>formData.append(&#39;file&#39;, fileInput.files[0]);</span></span>\n<span class="line"><span>formData.append(&#39;name&#39;, &#39;john&#39;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>axios.post(&#39;https://example.com/upload&#39;, formData, {</span></span>\n<span class="line"><span>  headers: { &#39;Content-Type&#39;: &#39;multipart/form-data&#39; }</span></span>\n<span class="line"><span>});</span></span></code></pre></div><h3 id="总结对比" tabindex="-1">总结对比 <a class="header-anchor" href="#总结对比" aria-label="Permalink to &quot;总结对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th><code>application/x-www-form-urlencoded</code></th><th><code>multipart/form-data</code></th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>主要用于表单数据（文本数据）。</td><td>主要用于上传文件，传输二进制数据或混合数据。</td></tr><tr><td><strong>数据编码方式</strong></td><td>键值对形式，数据进行 URL 编码。</td><td>按照 <code>multipart</code><br> 格式，文本和文件分开传输。</td></tr><tr><td><strong>是否支持文件上传</strong></td><td>不支持文件上传。</td><td>支持文件上传和二进制数据。</td></tr><tr><td><strong>是否进行 URL 编码</strong></td><td>会进行 URL 编码（空格转为 <code>+</code><br>，特殊字符转为 <code>%</code><br>）。</td><td>不进行 URL 编码，直接传输原始二进制数据。</td></tr><tr><td><strong>请求体大小限制</strong></td><td>小数据量，通常在 1MB 以下。</td><td>支持大文件上传，理论上没有大小限制（受限于服务器配置）。</td></tr><tr><td><strong>适用数据类型</strong></td><td>适用于文本数据（如表单提交的用户名、密码）。</td><td>适用于文本和二进制数据混合的情况（如文件上传）。</td></tr></tbody></table><h3 id="何时使用哪个" tabindex="-1">何时使用哪个？ <a class="header-anchor" href="#何时使用哪个" aria-label="Permalink to &quot;何时使用哪个？&quot;">​</a></h3><ul><li>**使用 **<code>**application/x-www-form-urlencoded**</code>： <ul><li>当你只需要提交简单的表单数据（如用户名、密码、选项等）时，使用这种格式会比较简单高效。</li></ul></li><li>**使用 **<code>**multipart/form-data**</code>： <ul><li>当你需要上传文件或传输复杂的数据（文本 + 文件）时，应该使用这种格式，因为它允许你同时上传文件和表单字段，并且不会对文件数据进行编码，能保持文件的原始格式。</li></ul></li></ul>',23)]))}]]);export{t as __pageData,p as default};
