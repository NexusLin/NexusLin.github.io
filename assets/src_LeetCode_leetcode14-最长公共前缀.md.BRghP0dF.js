import{_ as p,D as h,c as e,I as n,w as l,j as a,a as s,a4 as t,o as k}from"./chunks/framework.DvHWMJgD.js";const B=JSON.parse('{"title":"3、简易题14- 最长公共前缀","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/LeetCode/leetcode14-最长公共前缀.md","filePath":"src/LeetCode/leetcode14-最长公共前缀.md"}'),r={name:"src/LeetCode/leetcode14-最长公共前缀.md"},E=a("h1",{id:"_3、简易题14-最长公共前缀",tabindex:"-1"},[s("3、简易题14- 最长公共前缀 "),a("a",{class:"header-anchor",href:"#_3、简易题14-最长公共前缀","aria-label":'Permalink to "3、简易题14- 最长公共前缀"'},"​")],-1),d=a("h2",{id:"_1-题目要求",tabindex:"-1"},[s("① 题目要求 "),a("a",{class:"header-anchor",href:"#_1-题目要求","aria-label":'Permalink to "① 题目要求"'},"​")],-1),o=t(`<p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><h3 id="官方给的实例" tabindex="-1">官方给的实例： <a class="header-anchor" href="#官方给的实例" aria-label="Permalink to &quot;官方给的实例：&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>示例 1：</span></span>
<span class="line"><span>输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span></span>
<span class="line"><span>输出：&quot;fl&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>示例 2：</span></span>
<span class="line"><span>输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span></span>
<span class="line"><span>输出：&quot;&quot;</span></span>
<span class="line"><span>解释：输入不存在公共前缀。</span></span></code></pre></div><h3 id="_2-思路分析" tabindex="-1">② 思路分析 <a class="header-anchor" href="#_2-思路分析" aria-label="Permalink to &quot;② 思路分析&quot;">​</a></h3><ul><li>分析：</li></ul><p>取出最长公共前缀，那我们就可以直接拿第一个出来，然后转为数组，然后拿后面的每一个去跟这个第一项作比较，看里面的字符是否相同，如果后面的字符创长度比这个第一项还短，那就可以直接忽略不计。比这个长的话，游戏继续。</p><p>具体实现：</p><blockquote><p>数组为空，返回’’</p><p>循环里面的字符串每个的长度 i</p><p>循环外层数组长度 s</p><p>判断flower 下的f是否和flow 下的f相同</p><p>相同=&gt; 返回l拼接到第一个下面依次</p><p>不相同=&gt; 返回原本的</p></blockquote>`,9),g={id:"_3-解题方法",tabindex:"-1"},c=a("a",{class:"header-anchor",href:"#_3-解题方法","aria-label":'Permalink to "<font style="color:rgb(79, 79, 79);">③ 解题方法</font>"'},"​",-1),y={id:"方式一",tabindex:"-1"},_=a("a",{class:"header-anchor",href:"#方式一","aria-label":'Permalink to "<font style="color:rgb(79, 79, 79);">方式一：</font>"'},"​",-1),F=t(`<div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//</span></span>
<span class="line"><span>var longestCommonPrefix = function(strs) {</span></span>
<span class="line"><span>    if(strs.length==0){</span></span>
<span class="line"><span>          return &#39;&#39;   </span></span>
<span class="line"><span>      };</span></span>
<span class="line"><span>      var allstring = &quot;&quot;;</span></span>
<span class="line"><span>      for (var s = 0; s &lt; strs[0].length; s++) {</span></span>
<span class="line"><span>          var dataA = strs[0][s];</span></span>
<span class="line"><span>          for (var m = 1; m &lt; strs.length; m++) {</span></span>
<span class="line"><span>              if ( s &gt;= strs[m].length ||  strs[m][s] !== strs[0][s]) {</span></span>
<span class="line"><span>                  return allstring;</span></span>
<span class="line"><span>              }</span></span>
<span class="line"><span>              allstring +=  strs[0][s];</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      return allstring</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>输出以后发现，虽然貌似没啥毛病，但是就是除了问题。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffllo strsall</span></span></code></pre></div>`,3),u=t(`<h4 id="完善我们的代码以后" tabindex="-1">完善我们的代码以后： <a class="header-anchor" href="#完善我们的代码以后" aria-label="Permalink to &quot;完善我们的代码以后：&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flower&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],flower </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;f&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;l&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strscommon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">strs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strs.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allstring </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][s];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs[m].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  strs[m][s] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][s]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allstring;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            allstring </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  strs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][s];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strscommon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strs),</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;strsall&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>查看我们的输出结果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fl strsall</span></span></code></pre></div><p>解题完成！</p>`,5);function C(f,b,m,A,v,q){const i=h("font");return k(),e("div",null,[E,d,n(i,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>[s("题目如下：")]),_:1}),o,a("h3",g,[n(i,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>[s("③ 解题方法")]),_:1}),s(),c]),a("h3",y,[n(i,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>[s("方式一：")]),_:1}),s(),_]),F,n(i,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>[s("重新分析我们的逻辑可以发现")]),_:1}),n(i,{style:{color:"rgb(85, 86, 102)","background-color":"rgb(238, 240, 244)"}},{default:l(()=>[s("我依次使用了循环第一个数据字符串长度 ⇒ 整个数组的长度= > 当第一次能满足条件的时候，我把值塞进了allstring里面，但是这个时候返回的第一个字母l 实在我循环外层数组的时候（也就是重新循环了2次），所以返回的ll ，所以我的allstring 其实应该放到外层循环的外头即可，取循环第一次的其中相同的字符串即可。")]),_:1}),u])}const T=p(r,[["render",C]]);export{B as __pageData,T as default};
