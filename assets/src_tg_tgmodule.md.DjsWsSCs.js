import{_ as e,c as t,ag as n,o as s}from"./chunks/framework.wRLzwZz-.js";const u=JSON.parse('{"title":"TG（天工）-Module-introduce and function","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"src/tg/tgmodule.md","filePath":"src/tg/tgmodule.md"}'),i={name:"src/tg/tgmodule.md"};function l(o,a,r,d,p,c){return s(),t("div",null,a[0]||(a[0]=[n(`<h1 id="tg-天工-module-introduce-and-function" tabindex="-1">TG（天工）-Module-introduce and function <a class="header-anchor" href="#tg-天工-module-introduce-and-function" aria-label="Permalink to &quot;TG（天工）-Module-introduce and function&quot;">​</a></h1><h2 id="🧨-concept" tabindex="-1">🧨 Concept <a class="header-anchor" href="#🧨-concept" aria-label="Permalink to &quot;🧨 Concept&quot;">​</a></h2><ol><li>Simple</li><li>Simple and good-looking</li><li>Simple and easy to use</li></ol><h2 id="nexusvue" tabindex="-1">NexusVue <a class="header-anchor" href="#nexusvue" aria-label="Permalink to &quot;NexusVue&quot;">​</a></h2><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><h3 id="商城购物类模块" tabindex="-1">商城购物类模块 <a class="header-anchor" href="#商城购物类模块" aria-label="Permalink to &quot;商城购物类模块&quot;">​</a></h3><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Products：存储商品信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CartItems：存储每个用户购物车的商品及数量。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Orders：存储订单信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OrderItems：存储订单中的商品信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Payments：存储支付信息</span></span></code></pre></div><h3 id="模块化设计" tabindex="-1">模块化设计 <a class="header-anchor" href="#模块化设计" aria-label="Permalink to &quot;模块化设计&quot;">​</a></h3><p>商城购物类的接口，涉及到购物车管理、商品浏览、订单创建、支付等多个部分。整个购物流程通常包括以下几个关键步骤：</p><p>浏览商品：用户查看商品列表、商品详情。</p><p>添加商品到购物车：用户将商品加入购物车，可以修改商品数量、删除商品。 查看购物车：用户查看购物车中的商品、总价等。</p><p>创建订单：用户确认购物车中的商品并创建订单。 支付订单：用户支付订单金额。 订单管理：用户查看订单状态、历史订单。</p><p>购物逻辑的基本流程 商品展示： 用户请求商品列表或商品详情接口，服务器返回商品信息。 购物车操作： 用户将商品添加到购物车时，需要判断该商品是否已存在，若存在则更新数量；如果不存在则添加。 用户可以删除购物车中的商品或修改商品数量。 结算与创建订单： 用户在购物车界面点击结算时，系统会生成订单。订单信息包括用户信息、商品列表、总金额等。 支付订单： 用户选择支付方式，系统调用支付接口完成支付过程，支付成功后更新订单状态。 查看订单： 用户可以查看已支付订单的详情，包括支付状态、物流状态等</p><p>接口设计 接口主要涉及商品、购物车、订单三个部分</p>`,14)]))}const m=e(i,[["render",l]]);export{u as __pageData,m as default};
